Package cida;

Helpers
 digito = ['0' .. '9'];
 minusculo = ['a' .. 'z'];
 maiusculo = ['A' .. 'Z'];
 letra = (maiusculo | minusculo);
 letras = letra*;
 digitos = digito+;
 decimal = digito+;
 numero_real = digitos '.' decimal;
 letras_ou_digitos = letras | digitos;
 underline = '_';
 espaco = ' ';
 tudo_unicode = [0..0xffff];
 string_input = [tudo_unicode - ['''+'"']];
 numero_input = digitos | numero_real;
 comentario_blc = [tudo_unicode - '{'];
 boolean = 'yes' | 'no';
 rc = 13;
 nl = 10;
 ht	= 0x0009;
 lf	= 0x000a;
 ff	= 0x000c;
 cr	= 0x000d;
 eol = cr | nl | cr | nl ;
 blank = rc | nl | ht | lf | ff | cr ;
 tipos = 'symbol' | 'number' | 'answer';
 dimensao = '[' digito ']';
 
 
Tokens
 // Delimitadores
 abre_bloco = 'start';
 fecha_bloco = 'finish';
 par_esq = '(';
 par_dir = ')';
 dois_pontos = ':';
 virgula = ',';
 ponto_virgula = ';';
 ponto = '.';
 aspas = '"';
 colchete_esq = '[';
 colchete_dir = ']';
 
 
  // Operacoes Matematicas e Logicas
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 atribuicao = '<<';
 
 // Operacoes Logicas
 menor = '<';
 maior = '>';
 maior_igual = '>=';
 menor_igual = '<=';
 comparacao = '==';
 diferente = '!=';
 
 // Tokens de Controle
  in = 'in';
  case = 'case'; 
  otherwise = 'otherwise';
  that = 'that';
  considering = 'considering';
  from = 'from';
  to = 'to';
  by = 'by';
  as = 'as';
  long = 'long';
  and = 'and';
  or = 'or';
  not = 'not';
  xor = 'xor';
  do = 'do';
 
 code = 'code' (string_input);
 show = 'show';
 capture = 'capture';
 
 // Comentarios
 comentario_linha = ('--'[tudo_unicode-[cr+nl]]*);
 comentario_bloco = ('{-'comentario_blc*'-}');
 
 unalterable = 'unalterable';
 alterable = 'alterable';
 

 // Tipos primitivos
 symbol = 'symbol' |''' (letra) ''';
 number = 'number' | numero_input;
 answer = 'answer' | boolean;
 vector = 'vector';

// Vetores
 vetor_symbol = '"' (string_input)+ '"';


 vetores = tipos dimensao+ letras;
 
// Identificadores
 id = letras;

 
// Vazio
 vazio = (espaco | '\t' | '\n' | '\r' | blank )+;
 
Ignored Tokens
 comentario_bloco,
 comentario_linha,
 vazio;
 

Productions
    programa {-> a_programa } = 
    	{programa} code id bloco {-> New a_programa.a_programa(id, bloco.a_bloco)};

    bloco {-> a_bloco} = 
    	{bloco} abre_bloco declaracao* comando* fecha_bloco {-> New a_bloco.bloco([declaracao.a_declaracao], [comando.a_comando])};
    
    declaracao  {-> a_declaracao } =
        {dec_alterable} alterable tipo id ponto 							{-> New a_declaracao.dec_alterable(tipo.a_tipo, id)}
        |{dec_unalterable} unalterable tipo_base id atribuicao? exp0? ponto	{-> New a_declaracao.dec_unalterable(tipo_base.a_tipo_base, id, exp0.expr)};
    
        
    tipo_base {-> a_tipo_base } =
        {number} number		{-> New a_tipo_base.number(number)}
        |{answer} answer	{-> New a_tipo_base.answer(answer)}
        |{symbol} symbol	{-> New a_tipo_base.symbol(symbol)};
        
        
    tipo  {-> a_tipo } = 
        {tipo_base} tipo_base 																{-> New a_tipo.tipo_base(tipo_base.a_tipo_base)}
        |{tipo_vector} tipo_base vector colchete_esq exp0 colchete_dir colchete_vector* 	{-> New a_tipo.tipo_vector(tipo_base.a_tipo_base, exp0.expr, [colchete_vector.a_colchete_vector])};
        
        
	colchete_vector {-> a_colchete_vector} = 
		{expressao} colchete_esq exp0 colchete_dir {-> New a_colchete_vector.expressao(exp0.expr)};
        
    local {-> a_local } = 
        {id} id													{-> New a_local.id(id)}					
        |{dec_local} local colchete_esq exp0 colchete_dir		{-> New a_local.dec_local(local.a_local, exp0.expr)};
        
    local_virgula {-> a_local_virgula } = //repetições
    	{local_virgula} local virgula {-> New a_local_virgula.local_virgula(local.a_local)};
    	
   	exp_virgula {-> a_exp_virgula} = // repetições
   		{exp_virgula} exp0 virgula  {-> New a_exp_virgula.exp_virgula(exp0.expr)}; 
    	
   	comando_simples {-> a_comando_simples} = 
   		{in_case_that_simples} in case that par_esq exp0 par_dir do comando 															{-> New a_comando_simples.in_case_that_simples(exp0.expr, comando.a_comando)}
   		|{in_case_that_otherwise} in case that par_esq exp0 par_dir do [comando1]:comando_composto otherwise [comando2]:comando_simples {-> New a_comando_simples.in_case_that_otherwise(exp0.expr, comando1.a_comando_composto, comando2.a_comando_simples)};
   		
   	comando_composto {-> a_comando_composto} = //usando otherwise 
   		{in_case_composto} in case that par_esq exp0 par_dir do [comando1]:comando_composto otherwise [comando2]:comando_composto 	{-> New a_comando_composto.in_case_composto(exp0.expr, comando1.a_comando_composto, comando2.a_comando_composto)}
   		|{considering} considering local from [exp1]:exp0 to [exp2]:exp0 by [exp3]:exp0 do comando_composto							{-> New a_comando_composto.considering(local.a_local, exp1.expr, exp2.expr, exp3.expr, comando_composto.a_comando_composto)}
   		|{as_long_as} [as1]:as long [as2]:as par_esq exp0 par_dir do comando_composto												{-> New a_comando_composto.as_long_as(exp0.expr, comando_composto.a_comando_composto)}
   		|{capture} capture par_esq local_virgula* local par_dir ponto 																{-> New a_comando_composto.capture([local_virgula.a_local_virgula], local.a_local)}
    	|{show} show par_esq exp_virgula* exp0 par_dir ponto																		{-> New a_comando_composto.show([exp_virgula.a_exp_virgula], exp0.expr)}
    	|{comando_local} local atribuicao exp0 ponto 																				{-> New a_comando_composto.comando_local(local.a_local, exp0.expr)}
    	|{comando_bloco} bloco							 																			{-> New a_comando_composto.comando_bloco(bloco.a_bloco)};
   		

	comando {-> a_comando} = 																										
    		{comando_simples} comando_simples 		{-> New a_comando.comando_simples(comando_simples.a_comando_simples)}
    		|{comando_otherwise} comando_composto	{-> New a_comando.comando_otherwise(comando_composto.a_comando_composto)};																		
    
    exp0 {-> expr} =
    	 {exp1} exp1								{-> exp1.expr}					
    	 |{xor} [left]:exp0 xor [right]:exp1     	{-> New expr.xor(left.expr, right.expr)};
    	
	exp1 {-> expr} = 
		{exp2} exp2								{-> exp2.expr}											 	
		|{or} [left]:exp1 or   [right]:exp2		{-> New expr.or(left.expr, right.expr)}							
		|{and} [left]:exp1 and [right]:exp2   	{-> New expr.and(left.expr, right.expr)};
		
	exp2 {-> expr} = 
		{exp2} exp3											{-> exp3.expr}				
		|{diferente} [left]:exp2 diferente [right]:exp3		{-> New expr.diferente(left.expr, right.expr)}				
		|{comparacao} [left]:exp2 comparacao [right]:exp3 	{-> New expr.comparacao(left.expr, right.expr)};
		
	exp3 {-> expr} =
		{exp3} exp4											{-> exp4.expr}											
		|{maior_igual} [left]:exp3 maior_igual [right]:exp4 {-> New expr.maior_igual(left.expr, right.expr)}	
		|{menor_igual} [left]:exp3 menor_igual [right]:exp4 {-> New expr.menor_igual(left.expr, right.expr)};

	exp4 {-> expr} =
		{exp5} exp5									{-> exp5.expr}			
		|{maior} [left]:exp4 maior [right]:exp5		{-> New expr.maior(left.expr, right.expr)} 	
		|{menor} [left]:exp4 menor [right]:exp5    	{-> New expr.menor(left.expr, right.expr)};
		
	exp5 {-> expr} = 
		{exp6} exp6									{-> exp6.expr}							
		|{sub} [left]:exp5 menos [right]:exp6		{-> New expr.sub(left.expr, right.expr)}
		|{soma} [left]:exp5 soma [right]:exp6		{-> New expr.soma(left.expr, right.expr)};
	
	exp6 {-> expr} = 
		{exp7} exp7									{-> exp7.expr}			 				
		|{mod} [left]:exp6 mod [right]:exp7			{-> New expr.mod(left.expr, right.expr)}	
		|{div} [left]:exp6 div [right]:exp7			{-> New expr.div(left.expr, right.expr)}
		|{mult} [left]:exp6 mult [right]:exp7		{-> New expr.mult(left.expr, right.expr)};

	exp7 {-> expr} = 
		{exp8} exp8							{-> exp8.expr} 
		|{not} not [right]:exp7				{-> New expr.not(right.expr)} 
		|{menos} menos [right]:exp7			{-> New expr.menos(right.expr)};
	
	exp8 {-> expr} = //exp0 terminal 
		{number} number 				{-> New expr.number(number)}
	    |{symbol} symbol				{-> New expr.symbol(symbol)} 			
	    |{answer} answer 				{-> New expr.answer(answer)}		
	    |{vetor_symbol} vetor_symbol	{-> New expr.vetor_symbol(vetor_symbol)} 	
	    |{local} local					{-> New expr.local(local.a_local)}		 
	    |{paren} par_esq exp0 par_dir 	{-> New expr.paren(exp0.expr)};


Abstract Syntax Tree

    a_programa = 
        {a_programa} id a_bloco;

   	a_bloco = 
    	{bloco} a_declaracao* a_comando*;
    
    a_declaracao =
        {dec_alterable} a_tipo id
        |{dec_unalterable} a_tipo_base id expr?;

    a_tipo_base =
        {number} number
        |{answer} answer
        |{symbol} symbol;
        
    a_tipo = 
        {tipo_base} a_tipo_base
        |{tipo_vector} a_tipo_base expr a_colchete_vector*;

    a_colchete_vector = 
        {expressao} expr;
        
    a_local = 
        {id} id
        |{dec_local} a_local expr;
        
    a_local_virgula = //repetições
        {local_virgula} a_local;
        
    a_exp_virgula = // repetições
        {exp_virgula} expr;
        
   	a_comando_simples = 
   		{in_case_that_simples} expr a_comando 
   		|{in_case_that_otherwise} expr a_comando_composto a_comando_simples
   		|{comando_bloco_simples} a_bloco;

   		 	
   		
   a_comando_composto = 
   		{in_case_composto} expr [comando1]:a_comando_composto [comando2]:a_comando_composto 	
   		|{considering} a_local [exp1]:expr [exp2]:expr [exp3]:expr a_comando_composto						
   		|{as_long_as} expr a_comando_composto											
   		|{capture} a_local_virgula* a_local															
    	|{show} a_exp_virgula* expr																
    	|{comando_local} a_local expr 																			
    	|{comando_bloco} a_bloco;																			
        
    a_comando = 																										
    		{comando_simples} a_comando_simples
    		|{comando_otherwise} a_comando_composto;	
        
        
    
    expr =                   
        |{xor} [left]:expr [right]:expr                                           
        |{or} [left]:expr [right]:expr                            
        |{and} [left]:expr [right]:expr            
        |{diferente} [left]:expr [right]:expr                
        |{comparacao} [left]:expr [right]:expr               
        |{maior_igual} [left]:expr [right]:expr    
        |{menor_igual} [left]:expr [right]:expr        
        |{maior} [left]:expr [right]:expr    
        |{menor} [left]:expr [right]:expr                  
        |{sub} [left]:expr [right]:expr
        |{soma} [left]:expr [right]:expr                       
        |{mod} [left]:expr [right]:expr
        |{div} [left]:expr [right]:expr  
        |{mult} [left]:expr [right]:expr
        |{not} [right]:expr        
        |{menos} [right]:expr
        |{number} number  
        |{symbol} symbol       
        |{answer} answer                
        |{vetor_symbol} vetor_symbol     
        |{local} a_local                
        |{paren} expr;
