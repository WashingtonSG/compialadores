/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.node;

import cida.analysis.*;

@SuppressWarnings("nls")
public final class AConsideringComando extends PComando
{
    private TConsidering _considering_;
    private PLocal _local_;
    private TFrom _from_;
    private PExpTo _expTo_;
    private PExp _exp_;
    private TBy _by_;
    private TDo _do_;
    private PComando _comando_;

    public AConsideringComando()
    {
        // Constructor
    }

    public AConsideringComando(
        @SuppressWarnings("hiding") TConsidering _considering_,
        @SuppressWarnings("hiding") PLocal _local_,
        @SuppressWarnings("hiding") TFrom _from_,
        @SuppressWarnings("hiding") PExpTo _expTo_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TBy _by_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") PComando _comando_)
    {
        // Constructor
        setConsidering(_considering_);

        setLocal(_local_);

        setFrom(_from_);

        setExpTo(_expTo_);

        setExp(_exp_);

        setBy(_by_);

        setDo(_do_);

        setComando(_comando_);

    }

    @Override
    public Object clone()
    {
        return new AConsideringComando(
            cloneNode(this._considering_),
            cloneNode(this._local_),
            cloneNode(this._from_),
            cloneNode(this._expTo_),
            cloneNode(this._exp_),
            cloneNode(this._by_),
            cloneNode(this._do_),
            cloneNode(this._comando_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConsideringComando(this);
    }

    public TConsidering getConsidering()
    {
        return this._considering_;
    }

    public void setConsidering(TConsidering node)
    {
        if(this._considering_ != null)
        {
            this._considering_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._considering_ = node;
    }

    public PLocal getLocal()
    {
        return this._local_;
    }

    public void setLocal(PLocal node)
    {
        if(this._local_ != null)
        {
            this._local_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._local_ = node;
    }

    public TFrom getFrom()
    {
        return this._from_;
    }

    public void setFrom(TFrom node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public PExpTo getExpTo()
    {
        return this._expTo_;
    }

    public void setExpTo(PExpTo node)
    {
        if(this._expTo_ != null)
        {
            this._expTo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expTo_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TBy getBy()
    {
        return this._by_;
    }

    public void setBy(TBy node)
    {
        if(this._by_ != null)
        {
            this._by_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._by_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public PComando getComando()
    {
        return this._comando_;
    }

    public void setComando(PComando node)
    {
        if(this._comando_ != null)
        {
            this._comando_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comando_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._considering_)
            + toString(this._local_)
            + toString(this._from_)
            + toString(this._expTo_)
            + toString(this._exp_)
            + toString(this._by_)
            + toString(this._do_)
            + toString(this._comando_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._considering_ == child)
        {
            this._considering_ = null;
            return;
        }

        if(this._local_ == child)
        {
            this._local_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._expTo_ == child)
        {
            this._expTo_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._by_ == child)
        {
            this._by_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._comando_ == child)
        {
            this._comando_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._considering_ == oldChild)
        {
            setConsidering((TConsidering) newChild);
            return;
        }

        if(this._local_ == oldChild)
        {
            setLocal((PLocal) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((TFrom) newChild);
            return;
        }

        if(this._expTo_ == oldChild)
        {
            setExpTo((PExpTo) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._by_ == oldChild)
        {
            setBy((TBy) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._comando_ == oldChild)
        {
            setComando((PComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
