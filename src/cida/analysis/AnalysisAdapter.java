/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecAlterableDeclaracao(ADecAlterableDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecUnalterableDeclaracao(ADecUnalterableDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberTipoBase(ANumberTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnswerTipoBase(AAnswerTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolTipoBase(ASymbolTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoVectorTipo(ATipoVectorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressaoColcheteVector(AExpressaoColcheteVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdLocal(AIdLocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecLocalLocal(ADecLocalLocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsLongAsLong(AAsLongAsLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpToExpTo(AExpToExpTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoLocalComando(AComandoLocalComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaptureComando(ACaptureComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShowComando(AShowComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInCaseThatComando(AInCaseThatComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsLongAsComando(AAsLongAsComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConsideringComando(AConsideringComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBlocoComando(AComandoBlocoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpTerminalExp(AExpTerminalExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpSomaExp(AExpSomaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpSubtracaoExp(AExpSubtracaoExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpMultExp(AExpMultExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpDivExp(AExpDivExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpModExp(AExpModExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpComparaExp(AExpComparaExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpDiferenteExp(AExpDiferenteExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpMenorIgualExp(AExpMenorIgualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpMaiorIgualExp(AExpMaiorIgualExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpMenorExp(AExpMenorExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpMaiorExp(AExpMaiorExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpAndExp(AExpAndExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpOrExp(AExpOrExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpXorExp(AExpXorExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpSymbolExpTerminal(AExpSymbolExpTerminal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpNumberExpTerminal(AExpNumberExpTerminal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpAnswerExpTerminal(AExpAnswerExpTerminal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpStringExpTerminal(AExpStringExpTerminal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpLocalExpTerminal(AExpLocalExpTerminal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpNotExpTerminal(AExpNotExpTerminal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpPareExpTerminal(AExpPareExpTerminal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreBloco(TAbreBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaBloco(TFechaBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParEsq(TParEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParDir(TParDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPontos(TDoisPontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoVirgula(TPontoVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAspas(TAspas node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteEsq(TColcheteEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteDir(TColcheteDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumeros(TNumeros node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSoma(TSoma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorIgual(TMaiorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorIgual(TMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComparacao(TComparacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferente(TDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThat(TThat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsidering(TConsidering node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCode(TCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCapture(TCapture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioLinha(TComentarioLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioBloco(TComentarioBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnalterable(TUnalterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlterable(TAlterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbol(TSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswer(TAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBooleano(TBooleano node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVector(TVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVetorSymbol(TVetorSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVetores(TVetores node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
