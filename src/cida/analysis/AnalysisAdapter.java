/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAProgramaAPrograma(AAProgramaAPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoABloco(ABlocoABloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecAlterableADeclaracao(ADecAlterableADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecUnalterableADeclaracao(ADecUnalterableADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberATipoBase(ANumberATipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnswerATipoBase(AAnswerATipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolATipoBase(ASymbolATipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoBaseATipo(ATipoBaseATipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATipoVectorATipo(ATipoVectorATipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpressaoAColcheteVector(AExpressaoAColcheteVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdALocal(AIdALocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecLocalALocal(ADecLocalALocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalVirgulaALocalVirgula(ALocalVirgulaALocalVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpVirgulaAExpVirgula(AExpVirgulaAExpVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInCaseThatSimplesAComandoSimples(AInCaseThatSimplesAComandoSimples node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInCaseThatOtherwiseAComandoSimples(AInCaseThatOtherwiseAComandoSimples node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBlocoSimplesAComandoSimples(AComandoBlocoSimplesAComandoSimples node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInCaseCompostoAComandoComposto(AInCaseCompostoAComandoComposto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConsideringAComandoComposto(AConsideringAComandoComposto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsLongAsAComandoComposto(AAsLongAsAComandoComposto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaptureAComandoComposto(ACaptureAComandoComposto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShowAComandoComposto(AShowAComandoComposto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoLocalAComandoComposto(AComandoLocalAComandoComposto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoBlocoAComandoComposto(AComandoBlocoAComandoComposto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoSimplesAComando(AComandoSimplesAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComandoOtherwiseAComando(AComandoOtherwiseAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAXorExpr(AXorExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiferenteExpr(ADiferenteExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAComparacaoExpr(AComparacaoExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorIgualExpr(AMaiorIgualExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorIgualExpr(AMenorIgualExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorExpr(AMaiorExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorExpr(AMenorExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASomaExpr(ASomaExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExpr(ANotExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberExpr(ANumberExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolExpr(ASymbolExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnswerExpr(AAnswerExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVetorSymbolExpr(AVetorSymbolExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalExpr(ALocalExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenExpr(AParenExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAbreBloco(TAbreBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFechaBloco(TFechaBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParEsq(TParEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParDir(TParDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoisPontos(TDoisPontos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPontoVirgula(TPontoVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAspas(TAspas node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteEsq(TColcheteEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteDir(TColcheteDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSoma(TSoma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorIgual(TMaiorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorIgual(TMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComparacao(TComparacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferente(TDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThat(TThat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsidering(TConsidering node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCode(TCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCapture(TCapture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioLinha(TComentarioLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioBloco(TComentarioBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnalterable(TUnalterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlterable(TAlterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbol(TSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswer(TAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVector(TVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVetorSymbol(TVetorSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVetores(TVetores node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
