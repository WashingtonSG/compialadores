/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        if(node.getCode() != null)
        {
            node.getCode().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAProgramaPrograma(node);
    }

    public void inABlocoBloco(ABlocoBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoBloco(ABlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        inABlocoBloco(node);
        if(node.getAbreBloco() != null)
        {
            node.getAbreBloco().apply(this);
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFechaBloco() != null)
        {
            node.getFechaBloco().apply(this);
        }
        outABlocoBloco(node);
    }

    public void inADecAlterableDeclaracao(ADecAlterableDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADecAlterableDeclaracao(ADecAlterableDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecAlterableDeclaracao(ADecAlterableDeclaracao node)
    {
        inADecAlterableDeclaracao(node);
        if(node.getAlterable() != null)
        {
            node.getAlterable().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outADecAlterableDeclaracao(node);
    }

    public void inADecUnalterableDeclaracao(ADecUnalterableDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADecUnalterableDeclaracao(ADecUnalterableDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecUnalterableDeclaracao(ADecUnalterableDeclaracao node)
    {
        inADecUnalterableDeclaracao(node);
        if(node.getUnalterable() != null)
        {
            node.getUnalterable().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outADecUnalterableDeclaracao(node);
    }

    public void inANumberTipoBase(ANumberTipoBase node)
    {
        defaultIn(node);
    }

    public void outANumberTipoBase(ANumberTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTipoBase(ANumberTipoBase node)
    {
        inANumberTipoBase(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTipoBase(node);
    }

    public void inAAnswerTipoBase(AAnswerTipoBase node)
    {
        defaultIn(node);
    }

    public void outAAnswerTipoBase(AAnswerTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnswerTipoBase(AAnswerTipoBase node)
    {
        inAAnswerTipoBase(node);
        if(node.getAnswer() != null)
        {
            node.getAnswer().apply(this);
        }
        outAAnswerTipoBase(node);
    }

    public void inASymbolTipoBase(ASymbolTipoBase node)
    {
        defaultIn(node);
    }

    public void outASymbolTipoBase(ASymbolTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolTipoBase(ASymbolTipoBase node)
    {
        inASymbolTipoBase(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outASymbolTipoBase(node);
    }

    public void inATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseTipo(ATipoBaseTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseTipo(ATipoBaseTipo node)
    {
        inATipoBaseTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outATipoBaseTipo(node);
    }

    public void inATipoVectorTipo(ATipoVectorTipo node)
    {
        defaultIn(node);
    }

    public void outATipoVectorTipo(ATipoVectorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoVectorTipo(ATipoVectorTipo node)
    {
        inATipoVectorTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getVector() != null)
        {
            node.getVector().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        {
            List<PColcheteVector> copy = new ArrayList<PColcheteVector>(node.getColcheteVector());
            for(PColcheteVector e : copy)
            {
                e.apply(this);
            }
        }
        outATipoVectorTipo(node);
    }

    public void inAExpressaoColcheteVector(AExpressaoColcheteVector node)
    {
        defaultIn(node);
    }

    public void outAExpressaoColcheteVector(AExpressaoColcheteVector node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoColcheteVector(AExpressaoColcheteVector node)
    {
        inAExpressaoColcheteVector(node);
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        outAExpressaoColcheteVector(node);
    }

    public void inAIdLocal(AIdLocal node)
    {
        defaultIn(node);
    }

    public void outAIdLocal(AIdLocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLocal(AIdLocal node)
    {
        inAIdLocal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdLocal(node);
    }

    public void inADecLocalLocal(ADecLocalLocal node)
    {
        defaultIn(node);
    }

    public void outADecLocalLocal(ADecLocalLocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecLocalLocal(ADecLocalLocal node)
    {
        inADecLocalLocal(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        outADecLocalLocal(node);
    }

    public void inALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        defaultIn(node);
    }

    public void outALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        inALocalVirgulaLocalVirgula(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outALocalVirgulaLocalVirgula(node);
    }

    public void inAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node)
    {
        inAExpVirgulaExpVirgula(node);
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAExpVirgulaExpVirgula(node);
    }

    public void inAComandoLocalComando(AComandoLocalComando node)
    {
        defaultIn(node);
    }

    public void outAComandoLocalComando(AComandoLocalComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLocalComando(AComandoLocalComando node)
    {
        inAComandoLocalComando(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAComandoLocalComando(node);
    }

    public void inACaptureComando(ACaptureComando node)
    {
        defaultIn(node);
    }

    public void outACaptureComando(ACaptureComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaptureComando(ACaptureComando node)
    {
        inACaptureComando(node);
        if(node.getCapture() != null)
        {
            node.getCapture().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        {
            List<PLocalVirgula> copy = new ArrayList<PLocalVirgula>(node.getLocalVirgula());
            for(PLocalVirgula e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outACaptureComando(node);
    }

    public void inAShowComando(AShowComando node)
    {
        defaultIn(node);
    }

    public void outAShowComando(AShowComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowComando(AShowComando node)
    {
        inAShowComando(node);
        if(node.getShow() != null)
        {
            node.getShow().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        {
            List<PExpVirgula> copy = new ArrayList<PExpVirgula>(node.getExpVirgula());
            for(PExpVirgula e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAShowComando(node);
    }

    public void inAInCaseThatComando(AInCaseThatComando node)
    {
        defaultIn(node);
    }

    public void outAInCaseThatComando(AInCaseThatComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInCaseThatComando(AInCaseThatComando node)
    {
        inAInCaseThatComando(node);
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getThat() != null)
        {
            node.getThat().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getComando1() != null)
        {
            node.getComando1().apply(this);
        }
        if(node.getOtherwise() != null)
        {
            node.getOtherwise().apply(this);
        }
        if(node.getComando2() != null)
        {
            node.getComando2().apply(this);
        }
        outAInCaseThatComando(node);
    }

    public void inAAsLongAsComando(AAsLongAsComando node)
    {
        defaultIn(node);
    }

    public void outAAsLongAsComando(AAsLongAsComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsLongAsComando(AAsLongAsComando node)
    {
        inAAsLongAsComando(node);
        if(node.getAs1() != null)
        {
            node.getAs1().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getAs2() != null)
        {
            node.getAs2().apply(this);
        }
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAAsLongAsComando(node);
    }

    public void inAConsideringComando(AConsideringComando node)
    {
        defaultIn(node);
    }

    public void outAConsideringComando(AConsideringComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsideringComando(AConsideringComando node)
    {
        inAConsideringComando(node);
        if(node.getConsidering() != null)
        {
            node.getConsidering().apply(this);
        }
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getBy() != null)
        {
            node.getBy().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAConsideringComando(node);
    }

    public void inAComandoBlocoComando(AComandoBlocoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoBlocoComando(AComandoBlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoBlocoComando(AComandoBlocoComando node)
    {
        inAComandoBlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAComandoBlocoComando(node);
    }

    public void inAExpExp0(AExpExp0 node)
    {
        defaultIn(node);
    }

    public void outAExpExp0(AExpExp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExp0(AExpExp0 node)
    {
        inAExpExp0(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpExp0(node);
    }

    public void inAExp0Exp0(AExp0Exp0 node)
    {
        defaultIn(node);
    }

    public void outAExp0Exp0(AExp0Exp0 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp0Exp0(AExp0Exp0 node)
    {
        inAExp0Exp0(node);
        if(node.getExp0() != null)
        {
            node.getExp0().apply(this);
        }
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExp0Exp0(node);
    }

    public void inAExp1Exp(AExp1Exp node)
    {
        defaultIn(node);
    }

    public void outAExp1Exp(AExp1Exp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp1Exp(AExp1Exp node)
    {
        inAExp1Exp(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAExp1Exp(node);
    }

    public void inAExpOuExp(AExpOuExp node)
    {
        defaultIn(node);
    }

    public void outAExpOuExp(AExpOuExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpOuExp(AExpOuExp node)
    {
        inAExpOuExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAExpOuExp(node);
    }

    public void inAExpAndExp(AExpAndExp node)
    {
        defaultIn(node);
    }

    public void outAExpAndExp(AExpAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAndExp(AExpAndExp node)
    {
        inAExpAndExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        outAExpAndExp(node);
    }

    public void inAExp2Exp1(AExp2Exp1 node)
    {
        defaultIn(node);
    }

    public void outAExp2Exp1(AExp2Exp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp2Exp1(AExp2Exp1 node)
    {
        inAExp2Exp1(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExp2Exp1(node);
    }

    public void inAExpDiferenteExp1(AExpDiferenteExp1 node)
    {
        defaultIn(node);
    }

    public void outAExpDiferenteExp1(AExpDiferenteExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpDiferenteExp1(AExpDiferenteExp1 node)
    {
        inAExpDiferenteExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExpDiferenteExp1(node);
    }

    public void inAExpComparacaoExp1(AExpComparacaoExp1 node)
    {
        defaultIn(node);
    }

    public void outAExpComparacaoExp1(AExpComparacaoExp1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpComparacaoExp1(AExpComparacaoExp1 node)
    {
        inAExpComparacaoExp1(node);
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getComparacao() != null)
        {
            node.getComparacao().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        outAExpComparacaoExp1(node);
    }

    public void inAExp3Exp2(AExp3Exp2 node)
    {
        defaultIn(node);
    }

    public void outAExp3Exp2(AExp3Exp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp3Exp2(AExp3Exp2 node)
    {
        inAExp3Exp2(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExp3Exp2(node);
    }

    public void inAExpMaiorIgualExp2(AExpMaiorIgualExp2 node)
    {
        defaultIn(node);
    }

    public void outAExpMaiorIgualExp2(AExpMaiorIgualExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMaiorIgualExp2(AExpMaiorIgualExp2 node)
    {
        inAExpMaiorIgualExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExpMaiorIgualExp2(node);
    }

    public void inAExpMenorIgualExp2(AExpMenorIgualExp2 node)
    {
        defaultIn(node);
    }

    public void outAExpMenorIgualExp2(AExpMenorIgualExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMenorIgualExp2(AExpMenorIgualExp2 node)
    {
        inAExpMenorIgualExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExpMenorIgualExp2(node);
    }

    public void inAExpMaiorExp2(AExpMaiorExp2 node)
    {
        defaultIn(node);
    }

    public void outAExpMaiorExp2(AExpMaiorExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMaiorExp2(AExpMaiorExp2 node)
    {
        inAExpMaiorExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExpMaiorExp2(node);
    }

    public void inAExpMenorExp2(AExpMenorExp2 node)
    {
        defaultIn(node);
    }

    public void outAExpMenorExp2(AExpMenorExp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMenorExp2(AExpMenorExp2 node)
    {
        inAExpMenorExp2(node);
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        outAExpMenorExp2(node);
    }

    public void inAExp4Exp3(AExp4Exp3 node)
    {
        defaultIn(node);
    }

    public void outAExp4Exp3(AExp4Exp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp4Exp3(AExp4Exp3 node)
    {
        inAExp4Exp3(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExp4Exp3(node);
    }

    public void inAExpSubExp3(AExpSubExp3 node)
    {
        defaultIn(node);
    }

    public void outAExpSubExp3(AExpSubExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSubExp3(AExpSubExp3 node)
    {
        inAExpSubExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExpSubExp3(node);
    }

    public void inAExpSomaExp3(AExpSomaExp3 node)
    {
        defaultIn(node);
    }

    public void outAExpSomaExp3(AExpSomaExp3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSomaExp3(AExpSomaExp3 node)
    {
        inAExpSomaExp3(node);
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        outAExpSomaExp3(node);
    }

    public void inAExp5Exp4(AExp5Exp4 node)
    {
        defaultIn(node);
    }

    public void outAExp5Exp4(AExp5Exp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp5Exp4(AExp5Exp4 node)
    {
        inAExp5Exp4(node);
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExp5Exp4(node);
    }

    public void inAExpModExp4(AExpModExp4 node)
    {
        defaultIn(node);
    }

    public void outAExpModExp4(AExpModExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpModExp4(AExpModExp4 node)
    {
        inAExpModExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExpModExp4(node);
    }

    public void inAExpDivExp4(AExpDivExp4 node)
    {
        defaultIn(node);
    }

    public void outAExpDivExp4(AExpDivExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpDivExp4(AExpDivExp4 node)
    {
        inAExpDivExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExpDivExp4(node);
    }

    public void inAExpMultExp4(AExpMultExp4 node)
    {
        defaultIn(node);
    }

    public void outAExpMultExp4(AExpMultExp4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpMultExp4(AExpMultExp4 node)
    {
        inAExpMultExp4(node);
        if(node.getExp4() != null)
        {
            node.getExp4().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExpMultExp4(node);
    }

    public void inAExpSymbolExp5(AExpSymbolExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpSymbolExp5(AExpSymbolExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSymbolExp5(AExpSymbolExp5 node)
    {
        inAExpSymbolExp5(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outAExpSymbolExp5(node);
    }

    public void inAExpNumberExp5(AExpNumberExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpNumberExp5(AExpNumberExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNumberExp5(AExpNumberExp5 node)
    {
        inAExpNumberExp5(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outAExpNumberExp5(node);
    }

    public void inAExpAnswerExp5(AExpAnswerExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpAnswerExp5(AExpAnswerExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpAnswerExp5(AExpAnswerExp5 node)
    {
        inAExpAnswerExp5(node);
        if(node.getAnswer() != null)
        {
            node.getAnswer().apply(this);
        }
        outAExpAnswerExp5(node);
    }

    public void inAExpStringExp5(AExpStringExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpStringExp5(AExpStringExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpStringExp5(AExpStringExp5 node)
    {
        inAExpStringExp5(node);
        if(node.getVetorSymbol() != null)
        {
            node.getVetorSymbol().apply(this);
        }
        outAExpStringExp5(node);
    }

    public void inAExpLocalExp5(AExpLocalExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpLocalExp5(AExpLocalExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLocalExp5(AExpLocalExp5 node)
    {
        inAExpLocalExp5(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        outAExpLocalExp5(node);
    }

    public void inAExpNotExp5(AExpNotExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpNotExp5(AExpNotExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNotExp5(AExpNotExp5 node)
    {
        inAExpNotExp5(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExpNotExp5(node);
    }

    public void inAExpNegativoExp5(AExpNegativoExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpNegativoExp5(AExpNegativoExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpNegativoExp5(AExpNegativoExp5 node)
    {
        inAExpNegativoExp5(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        outAExpNegativoExp5(node);
    }

    public void inAExpPareExp5(AExpPareExp5 node)
    {
        defaultIn(node);
    }

    public void outAExpPareExp5(AExpPareExp5 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpPareExp5(AExpPareExp5 node)
    {
        inAExpPareExp5(node);
        if(node.getParEsq() != null)
        {
            node.getParEsq().apply(this);
        }
        if(node.getExp5() != null)
        {
            node.getExp5().apply(this);
        }
        if(node.getParDir() != null)
        {
            node.getParDir().apply(this);
        }
        outAExpPareExp5(node);
    }
}
