/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import cida.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramaPrograma(AProgramaPrograma node);
    void caseABlocoBloco(ABlocoBloco node);
    void caseADecAlterableDeclaracao(ADecAlterableDeclaracao node);
    void caseADecUnalterableDeclaracao(ADecUnalterableDeclaracao node);
    void caseANumberTipoBase(ANumberTipoBase node);
    void caseAAnswerTipoBase(AAnswerTipoBase node);
    void caseASymbolTipoBase(ASymbolTipoBase node);
    void caseATipoBaseTipo(ATipoBaseTipo node);
    void caseATipoVectorTipo(ATipoVectorTipo node);
    void caseAExpressaoColcheteVector(AExpressaoColcheteVector node);
    void caseAIdLocal(AIdLocal node);
    void caseADecLocalLocal(ADecLocalLocal node);
    void caseALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node);
    void caseAExpVirgulaExpVirgula(AExpVirgulaExpVirgula node);
    void caseAAsLongAsLong(AAsLongAsLong node);
    void caseAExpToExpTo(AExpToExpTo node);
    void caseAComandoLocalComando(AComandoLocalComando node);
    void caseACaptureComando(ACaptureComando node);
    void caseAShowComando(AShowComando node);
    void caseAInCaseThatComando(AInCaseThatComando node);
    void caseAAsLongAsComando(AAsLongAsComando node);
    void caseAConsideringComando(AConsideringComando node);
    void caseAComandoBlocoComando(AComandoBlocoComando node);
    void caseAExpTerminalExp(AExpTerminalExp node);
    void caseAExpSomaExp(AExpSomaExp node);
    void caseAExpSubtracaoExp(AExpSubtracaoExp node);
    void caseAExpMultExp(AExpMultExp node);
    void caseAExpDivExp(AExpDivExp node);
    void caseAExpModExp(AExpModExp node);
    void caseAExpComparaExp(AExpComparaExp node);
    void caseAExpDiferenteExp(AExpDiferenteExp node);
    void caseAExpMenorIgualExp(AExpMenorIgualExp node);
    void caseAExpMaiorIgualExp(AExpMaiorIgualExp node);
    void caseAExpMenorExp(AExpMenorExp node);
    void caseAExpMaiorExp(AExpMaiorExp node);
    void caseAExpAndExp(AExpAndExp node);
    void caseAExpOrExp(AExpOrExp node);
    void caseAExpXorExp(AExpXorExp node);
    void caseAExpSymbolExpTerminal(AExpSymbolExpTerminal node);
    void caseAExpNumberExpTerminal(AExpNumberExpTerminal node);
    void caseAExpAnswerExpTerminal(AExpAnswerExpTerminal node);
    void caseAExpStringExpTerminal(AExpStringExpTerminal node);
    void caseAExpLocalExpTerminal(AExpLocalExpTerminal node);
    void caseAExpNotExpTerminal(AExpNotExpTerminal node);
    void caseAExpPareExpTerminal(AExpPareExpTerminal node);

    void caseTAbreBloco(TAbreBloco node);
    void caseTFechaBloco(TFechaBloco node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTVirgula(TVirgula node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTPonto(TPonto node);
    void caseTAspas(TAspas node);
    void caseTColcheteEsq(TColcheteEsq node);
    void caseTColcheteDir(TColcheteDir node);
    void caseTNumeros(TNumeros node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTComparacao(TComparacao node);
    void caseTDiferente(TDiferente node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTOtherwise(TOtherwise node);
    void caseTThat(TThat node);
    void caseTConsidering(TConsidering node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTXor(TXor node);
    void caseTDo(TDo node);
    void caseTCode(TCode node);
    void caseTShow(TShow node);
    void caseTCapture(TCapture node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTUnalterable(TUnalterable node);
    void caseTAlterable(TAlterable node);
    void caseTSymbol(TSymbol node);
    void caseTNumber(TNumber node);
    void caseTAnswer(TAnswer node);
    void caseTBooleano(TBooleano node);
    void caseTVector(TVector node);
    void caseTVetorSymbol(TVetorSymbol node);
    void caseTVetores(TVetores node);
    void caseTId(TId node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
