/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import cida.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAProgramaAPrograma(AAProgramaAPrograma node);
    void caseABlocoABloco(ABlocoABloco node);
    void caseADecAlterableADeclaracao(ADecAlterableADeclaracao node);
    void caseADecUnalterableADeclaracao(ADecUnalterableADeclaracao node);
    void caseANumberATipoBase(ANumberATipoBase node);
    void caseAAnswerATipoBase(AAnswerATipoBase node);
    void caseASymbolATipoBase(ASymbolATipoBase node);
    void caseATipoBaseATipo(ATipoBaseATipo node);
    void caseATipoVectorATipo(ATipoVectorATipo node);
    void caseAExpressaoAColcheteVector(AExpressaoAColcheteVector node);
    void caseAIdALocal(AIdALocal node);
    void caseADecLocalALocal(ADecLocalALocal node);
    void caseALocalVirgulaALocalVirgula(ALocalVirgulaALocalVirgula node);
    void caseAExpVirgulaAExpVirgula(AExpVirgulaAExpVirgula node);
    void caseAInCaseThatSimplesAComandoSimples(AInCaseThatSimplesAComandoSimples node);
    void caseAInCaseThatOtherwiseAComandoSimples(AInCaseThatOtherwiseAComandoSimples node);
    void caseAComandoBlocoSimplesAComandoSimples(AComandoBlocoSimplesAComandoSimples node);
    void caseAInCaseCompostoAComandoComposto(AInCaseCompostoAComandoComposto node);
    void caseAConsideringAComandoComposto(AConsideringAComandoComposto node);
    void caseAAsLongAsAComandoComposto(AAsLongAsAComandoComposto node);
    void caseACaptureAComandoComposto(ACaptureAComandoComposto node);
    void caseAShowAComandoComposto(AShowAComandoComposto node);
    void caseAComandoLocalAComandoComposto(AComandoLocalAComandoComposto node);
    void caseAComandoBlocoAComandoComposto(AComandoBlocoAComandoComposto node);
    void caseAComandoSimplesAComando(AComandoSimplesAComando node);
    void caseAComandoOtherwiseAComando(AComandoOtherwiseAComando node);
    void caseAExpr(AExpr node);
    void caseAXorExpr(AXorExpr node);
    void caseAOrExpr(AOrExpr node);
    void caseAAndExpr(AAndExpr node);
    void caseADiferenteExpr(ADiferenteExpr node);
    void caseAComparacaoExpr(AComparacaoExpr node);
    void caseAMaiorIgualExpr(AMaiorIgualExpr node);
    void caseAMenorIgualExpr(AMenorIgualExpr node);
    void caseAMaiorExpr(AMaiorExpr node);
    void caseAMenorExpr(AMenorExpr node);
    void caseASubExpr(ASubExpr node);
    void caseASomaExpr(ASomaExpr node);
    void caseAModExpr(AModExpr node);
    void caseADivExpr(ADivExpr node);
    void caseAMultExpr(AMultExpr node);
    void caseANotExpr(ANotExpr node);
    void caseAMenosExpr(AMenosExpr node);
    void caseANumberExpr(ANumberExpr node);
    void caseASymbolExpr(ASymbolExpr node);
    void caseAAnswerExpr(AAnswerExpr node);
    void caseAVetorSymbolExpr(AVetorSymbolExpr node);
    void caseALocalExpr(ALocalExpr node);
    void caseAParenExpr(AParenExpr node);

    void caseTAbreBloco(TAbreBloco node);
    void caseTFechaBloco(TFechaBloco node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTDoisPontos(TDoisPontos node);
    void caseTVirgula(TVirgula node);
    void caseTPontoVirgula(TPontoVirgula node);
    void caseTPonto(TPonto node);
    void caseTAspas(TAspas node);
    void caseTColcheteEsq(TColcheteEsq node);
    void caseTColcheteDir(TColcheteDir node);
    void caseTSoma(TSoma node);
    void caseTMenos(TMenos node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTComparacao(TComparacao node);
    void caseTDiferente(TDiferente node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTOtherwise(TOtherwise node);
    void caseTThat(TThat node);
    void caseTConsidering(TConsidering node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTNot(TNot node);
    void caseTXor(TXor node);
    void caseTDo(TDo node);
    void caseTCode(TCode node);
    void caseTShow(TShow node);
    void caseTCapture(TCapture node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTUnalterable(TUnalterable node);
    void caseTAlterable(TAlterable node);
    void caseTSymbol(TSymbol node);
    void caseTNumber(TNumber node);
    void caseTAnswer(TAnswer node);
    void caseTVector(TVector node);
    void caseTVetorSymbol(TVetorSymbol node);
    void caseTVetores(TVetores node);
    void caseTId(TId node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
