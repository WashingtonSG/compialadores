/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAPrograma().apply(this);
        outStart(node);
    }

    public void inAAProgramaAPrograma(AAProgramaAPrograma node)
    {
        defaultIn(node);
    }

    public void outAAProgramaAPrograma(AAProgramaAPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProgramaAPrograma(AAProgramaAPrograma node)
    {
        inAAProgramaAPrograma(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAProgramaAPrograma(node);
    }

    public void inABlocoABloco(ABlocoABloco node)
    {
        defaultIn(node);
    }

    public void outABlocoABloco(ABlocoABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoABloco(ABlocoABloco node)
    {
        inABlocoABloco(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            Collections.reverse(copy);
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PADeclaracao> copy = new ArrayList<PADeclaracao>(node.getADeclaracao());
            Collections.reverse(copy);
            for(PADeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outABlocoABloco(node);
    }

    public void inADecAlterableADeclaracao(ADecAlterableADeclaracao node)
    {
        defaultIn(node);
    }

    public void outADecAlterableADeclaracao(ADecAlterableADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecAlterableADeclaracao(ADecAlterableADeclaracao node)
    {
        inADecAlterableADeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outADecAlterableADeclaracao(node);
    }

    public void inADecUnalterableADeclaracao(ADecUnalterableADeclaracao node)
    {
        defaultIn(node);
    }

    public void outADecUnalterableADeclaracao(ADecUnalterableADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecUnalterableADeclaracao(ADecUnalterableADeclaracao node)
    {
        inADecUnalterableADeclaracao(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipoBase() != null)
        {
            node.getATipoBase().apply(this);
        }
        outADecUnalterableADeclaracao(node);
    }

    public void inANumberATipoBase(ANumberATipoBase node)
    {
        defaultIn(node);
    }

    public void outANumberATipoBase(ANumberATipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberATipoBase(ANumberATipoBase node)
    {
        inANumberATipoBase(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberATipoBase(node);
    }

    public void inAAnswerATipoBase(AAnswerATipoBase node)
    {
        defaultIn(node);
    }

    public void outAAnswerATipoBase(AAnswerATipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnswerATipoBase(AAnswerATipoBase node)
    {
        inAAnswerATipoBase(node);
        if(node.getAnswer() != null)
        {
            node.getAnswer().apply(this);
        }
        outAAnswerATipoBase(node);
    }

    public void inASymbolATipoBase(ASymbolATipoBase node)
    {
        defaultIn(node);
    }

    public void outASymbolATipoBase(ASymbolATipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolATipoBase(ASymbolATipoBase node)
    {
        inASymbolATipoBase(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outASymbolATipoBase(node);
    }

    public void inATipoBaseATipo(ATipoBaseATipo node)
    {
        defaultIn(node);
    }

    public void outATipoBaseATipo(ATipoBaseATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoBaseATipo(ATipoBaseATipo node)
    {
        inATipoBaseATipo(node);
        if(node.getATipoBase() != null)
        {
            node.getATipoBase().apply(this);
        }
        outATipoBaseATipo(node);
    }

    public void inATipoVectorATipo(ATipoVectorATipo node)
    {
        defaultIn(node);
    }

    public void outATipoVectorATipo(ATipoVectorATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoVectorATipo(ATipoVectorATipo node)
    {
        inATipoVectorATipo(node);
        {
            List<PAColcheteVector> copy = new ArrayList<PAColcheteVector>(node.getAColcheteVector());
            Collections.reverse(copy);
            for(PAColcheteVector e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outATipoVectorATipo(node);
    }

    public void inAExpressaoAColcheteVector(AExpressaoAColcheteVector node)
    {
        defaultIn(node);
    }

    public void outAExpressaoAColcheteVector(AExpressaoAColcheteVector node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoAColcheteVector(AExpressaoAColcheteVector node)
    {
        inAExpressaoAColcheteVector(node);
        if(node.getColcheteDir() != null)
        {
            node.getColcheteDir().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getColcheteEsq() != null)
        {
            node.getColcheteEsq().apply(this);
        }
        outAExpressaoAColcheteVector(node);
    }

    public void inAIdALocal(AIdALocal node)
    {
        defaultIn(node);
    }

    public void outAIdALocal(AIdALocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdALocal(AIdALocal node)
    {
        inAIdALocal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdALocal(node);
    }

    public void inADecLocalALocal(ADecLocalALocal node)
    {
        defaultIn(node);
    }

    public void outADecLocalALocal(ADecLocalALocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecLocalALocal(ADecLocalALocal node)
    {
        inADecLocalALocal(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        outADecLocalALocal(node);
    }

    public void inALocalVirgulaALocalVirgula(ALocalVirgulaALocalVirgula node)
    {
        defaultIn(node);
    }

    public void outALocalVirgulaALocalVirgula(ALocalVirgulaALocalVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVirgulaALocalVirgula(ALocalVirgulaALocalVirgula node)
    {
        inALocalVirgulaALocalVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        outALocalVirgulaALocalVirgula(node);
    }

    public void inAExpVirgulaAExpVirgula(AExpVirgulaAExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpVirgulaAExpVirgula(AExpVirgulaAExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgulaAExpVirgula(AExpVirgulaAExpVirgula node)
    {
        inAExpVirgulaAExpVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExpVirgulaAExpVirgula(node);
    }

    public void inAInCaseThatSimplesAComandoSimples(AInCaseThatSimplesAComandoSimples node)
    {
        defaultIn(node);
    }

    public void outAInCaseThatSimplesAComandoSimples(AInCaseThatSimplesAComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInCaseThatSimplesAComandoSimples(AInCaseThatSimplesAComandoSimples node)
    {
        inAInCaseThatSimplesAComandoSimples(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInCaseThatSimplesAComandoSimples(node);
    }

    public void inAInCaseThatOtherwiseAComandoSimples(AInCaseThatOtherwiseAComandoSimples node)
    {
        defaultIn(node);
    }

    public void outAInCaseThatOtherwiseAComandoSimples(AInCaseThatOtherwiseAComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInCaseThatOtherwiseAComandoSimples(AInCaseThatOtherwiseAComandoSimples node)
    {
        inAInCaseThatOtherwiseAComandoSimples(node);
        if(node.getAComandoSimples() != null)
        {
            node.getAComandoSimples().apply(this);
        }
        if(node.getAComandoComposto() != null)
        {
            node.getAComandoComposto().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInCaseThatOtherwiseAComandoSimples(node);
    }

    public void inAComandoBlocoSimplesAComandoSimples(AComandoBlocoSimplesAComandoSimples node)
    {
        defaultIn(node);
    }

    public void outAComandoBlocoSimplesAComandoSimples(AComandoBlocoSimplesAComandoSimples node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoBlocoSimplesAComandoSimples(AComandoBlocoSimplesAComandoSimples node)
    {
        inAComandoBlocoSimplesAComandoSimples(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAComandoBlocoSimplesAComandoSimples(node);
    }

    public void inAInCaseCompostoAComandoComposto(AInCaseCompostoAComandoComposto node)
    {
        defaultIn(node);
    }

    public void outAInCaseCompostoAComandoComposto(AInCaseCompostoAComandoComposto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInCaseCompostoAComandoComposto(AInCaseCompostoAComandoComposto node)
    {
        inAInCaseCompostoAComandoComposto(node);
        if(node.getComando2() != null)
        {
            node.getComando2().apply(this);
        }
        if(node.getComando1() != null)
        {
            node.getComando1().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAInCaseCompostoAComandoComposto(node);
    }

    public void inAConsideringAComandoComposto(AConsideringAComandoComposto node)
    {
        defaultIn(node);
    }

    public void outAConsideringAComandoComposto(AConsideringAComandoComposto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsideringAComandoComposto(AConsideringAComandoComposto node)
    {
        inAConsideringAComandoComposto(node);
        if(node.getAComandoComposto() != null)
        {
            node.getAComandoComposto().apply(this);
        }
        if(node.getExp3() != null)
        {
            node.getExp3().apply(this);
        }
        if(node.getExp2() != null)
        {
            node.getExp2().apply(this);
        }
        if(node.getExp1() != null)
        {
            node.getExp1().apply(this);
        }
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        outAConsideringAComandoComposto(node);
    }

    public void inAAsLongAsAComandoComposto(AAsLongAsAComandoComposto node)
    {
        defaultIn(node);
    }

    public void outAAsLongAsAComandoComposto(AAsLongAsAComandoComposto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsLongAsAComandoComposto(AAsLongAsAComandoComposto node)
    {
        inAAsLongAsAComandoComposto(node);
        if(node.getAComandoComposto() != null)
        {
            node.getAComandoComposto().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAsLongAsAComandoComposto(node);
    }

    public void inACaptureAComandoComposto(ACaptureAComandoComposto node)
    {
        defaultIn(node);
    }

    public void outACaptureAComandoComposto(ACaptureAComandoComposto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaptureAComandoComposto(ACaptureAComandoComposto node)
    {
        inACaptureAComandoComposto(node);
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        {
            List<PALocalVirgula> copy = new ArrayList<PALocalVirgula>(node.getALocalVirgula());
            Collections.reverse(copy);
            for(PALocalVirgula e : copy)
            {
                e.apply(this);
            }
        }
        outACaptureAComandoComposto(node);
    }

    public void inAShowAComandoComposto(AShowAComandoComposto node)
    {
        defaultIn(node);
    }

    public void outAShowAComandoComposto(AShowAComandoComposto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowAComandoComposto(AShowAComandoComposto node)
    {
        inAShowAComandoComposto(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PAExpVirgula> copy = new ArrayList<PAExpVirgula>(node.getAExpVirgula());
            Collections.reverse(copy);
            for(PAExpVirgula e : copy)
            {
                e.apply(this);
            }
        }
        outAShowAComandoComposto(node);
    }

    public void inAComandoLocalAComandoComposto(AComandoLocalAComandoComposto node)
    {
        defaultIn(node);
    }

    public void outAComandoLocalAComandoComposto(AComandoLocalAComandoComposto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLocalAComandoComposto(AComandoLocalAComandoComposto node)
    {
        inAComandoLocalAComandoComposto(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        outAComandoLocalAComandoComposto(node);
    }

    public void inAComandoBlocoAComandoComposto(AComandoBlocoAComandoComposto node)
    {
        defaultIn(node);
    }

    public void outAComandoBlocoAComandoComposto(AComandoBlocoAComandoComposto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoBlocoAComandoComposto(AComandoBlocoAComandoComposto node)
    {
        inAComandoBlocoAComandoComposto(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAComandoBlocoAComandoComposto(node);
    }

    public void inAComandoSimplesAComando(AComandoSimplesAComando node)
    {
        defaultIn(node);
    }

    public void outAComandoSimplesAComando(AComandoSimplesAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSimplesAComando(AComandoSimplesAComando node)
    {
        inAComandoSimplesAComando(node);
        if(node.getAComandoSimples() != null)
        {
            node.getAComandoSimples().apply(this);
        }
        outAComandoSimplesAComando(node);
    }

    public void inAComandoOtherwiseAComando(AComandoOtherwiseAComando node)
    {
        defaultIn(node);
    }

    public void outAComandoOtherwiseAComando(AComandoOtherwiseAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoOtherwiseAComando(AComandoOtherwiseAComando node)
    {
        inAComandoOtherwiseAComando(node);
        if(node.getAComandoComposto() != null)
        {
            node.getAComandoComposto().apply(this);
        }
        outAComandoOtherwiseAComando(node);
    }

    public void inAExpr(AExpr node)
    {
        defaultIn(node);
    }

    public void outAExpr(AExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr(AExpr node)
    {
        inAExpr(node);
        outAExpr(node);
    }

    public void inAXorExpr(AXorExpr node)
    {
        defaultIn(node);
    }

    public void outAXorExpr(AXorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorExpr(AXorExpr node)
    {
        inAXorExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAXorExpr(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAOrExpr(node);
    }

    public void inAAndExpr(AAndExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExpr(AAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        inAAndExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExpr(node);
    }

    public void inADiferenteExpr(ADiferenteExpr node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpr(ADiferenteExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpr(ADiferenteExpr node)
    {
        inADiferenteExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADiferenteExpr(node);
    }

    public void inAComparacaoExpr(AComparacaoExpr node)
    {
        defaultIn(node);
    }

    public void outAComparacaoExpr(AComparacaoExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparacaoExpr(AComparacaoExpr node)
    {
        inAComparacaoExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAComparacaoExpr(node);
    }

    public void inAMaiorIgualExpr(AMaiorIgualExpr node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExpr(AMaiorIgualExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExpr(AMaiorIgualExpr node)
    {
        inAMaiorIgualExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMaiorIgualExpr(node);
    }

    public void inAMenorIgualExpr(AMenorIgualExpr node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExpr(AMenorIgualExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExpr(AMenorIgualExpr node)
    {
        inAMenorIgualExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMenorIgualExpr(node);
    }

    public void inAMaiorExpr(AMaiorExpr node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpr(AMaiorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpr(AMaiorExpr node)
    {
        inAMaiorExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMaiorExpr(node);
    }

    public void inAMenorExpr(AMenorExpr node)
    {
        defaultIn(node);
    }

    public void outAMenorExpr(AMenorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpr(AMenorExpr node)
    {
        inAMenorExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMenorExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubExpr(node);
    }

    public void inASomaExpr(ASomaExpr node)
    {
        defaultIn(node);
    }

    public void outASomaExpr(ASomaExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpr(ASomaExpr node)
    {
        inASomaExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASomaExpr(node);
    }

    public void inAModExpr(AModExpr node)
    {
        defaultIn(node);
    }

    public void outAModExpr(AModExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModExpr(AModExpr node)
    {
        inAModExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAModExpr(node);
    }

    public void inADivExpr(ADivExpr node)
    {
        defaultIn(node);
    }

    public void outADivExpr(ADivExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExpr(ADivExpr node)
    {
        inADivExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outADivExpr(node);
    }

    public void inAMultExpr(AMultExpr node)
    {
        defaultIn(node);
    }

    public void outAMultExpr(AMultExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExpr(AMultExpr node)
    {
        inAMultExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAMultExpr(node);
    }

    public void inANotExpr(ANotExpr node)
    {
        defaultIn(node);
    }

    public void outANotExpr(ANotExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExpr(ANotExpr node)
    {
        inANotExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outANotExpr(node);
    }

    public void inAMenosExpr(AMenosExpr node)
    {
        defaultIn(node);
    }

    public void outAMenosExpr(AMenosExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExpr(AMenosExpr node)
    {
        inAMenosExpr(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMenosExpr(node);
    }

    public void inANumberExpr(ANumberExpr node)
    {
        defaultIn(node);
    }

    public void outANumberExpr(ANumberExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberExpr(ANumberExpr node)
    {
        inANumberExpr(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberExpr(node);
    }

    public void inASymbolExpr(ASymbolExpr node)
    {
        defaultIn(node);
    }

    public void outASymbolExpr(ASymbolExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolExpr(ASymbolExpr node)
    {
        inASymbolExpr(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outASymbolExpr(node);
    }

    public void inAAnswerExpr(AAnswerExpr node)
    {
        defaultIn(node);
    }

    public void outAAnswerExpr(AAnswerExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnswerExpr(AAnswerExpr node)
    {
        inAAnswerExpr(node);
        if(node.getAnswer() != null)
        {
            node.getAnswer().apply(this);
        }
        outAAnswerExpr(node);
    }

    public void inAVetorSymbolExpr(AVetorSymbolExpr node)
    {
        defaultIn(node);
    }

    public void outAVetorSymbolExpr(AVetorSymbolExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorSymbolExpr(AVetorSymbolExpr node)
    {
        inAVetorSymbolExpr(node);
        if(node.getVetorSymbol() != null)
        {
            node.getVetorSymbol().apply(this);
        }
        outAVetorSymbolExpr(node);
    }

    public void inALocalExpr(ALocalExpr node)
    {
        defaultIn(node);
    }

    public void outALocalExpr(ALocalExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalExpr(ALocalExpr node)
    {
        inALocalExpr(node);
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        outALocalExpr(node);
    }

    public void inAParenExpr(AParenExpr node)
    {
        defaultIn(node);
    }

    public void outAParenExpr(AParenExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenExpr(AParenExpr node)
    {
        inAParenExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAParenExpr(node);
    }
}
