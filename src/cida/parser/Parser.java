/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.parser;

import cida.lexer.*;
import cida.node.*;
import cida.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramaPrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAblocobloco1Bloco */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAblocobloco2Bloco */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAblocobloco3Bloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAblocobloco4Bloco */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce ADecAlterableDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAdecunalterabledeclaracao1Declaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce AAdecunalterabledeclaracao2Declaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list, false);
            }
            break;
            case 8: /* reduce AAdecunalterabledeclaracao3Declaracao */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list, false);
            }
            break;
            case 9: /* reduce AAdecunalterabledeclaracao4Declaracao */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce ANumberTipoBase */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list, false);
            }
            break;
            case 11: /* reduce AAnswerTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list, false);
            }
            break;
            case 12: /* reduce ASymbolTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list, false);
            }
            break;
            case 13: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list, false);
            }
            break;
            case 14: /* reduce AAtipovectortipo1Tipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list, false);
            }
            break;
            case 15: /* reduce AAtipovectortipo2Tipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce AExpressaoColcheteVector */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AIdLocal */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce ADecLocalLocal */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce ALocalVirgulaLocalVirgula */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AExpVirgulaExpVirgula */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AAsLongAsLong */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list, false);
            }
            break;
            case 22: /* reduce AExpToExpTo */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AComandoLocalComando */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AAcapturecomando1Comando */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AAcapturecomando2Comando */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AAshowcomando1Comando */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AAshowcomando2Comando */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce AInCaseThatComando */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list, false);
            }
            break;
            case 29: /* reduce AAsLongAsComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list, false);
            }
            break;
            case 30: /* reduce AConsideringComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list, false);
            }
            break;
            case 31: /* reduce AComandoBlocoComando */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list, false);
            }
            break;
            case 32: /* reduce AExpTerminalExp */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list, false);
            }
            break;
            case 33: /* reduce AExpSomaExp */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list, false);
            }
            break;
            case 34: /* reduce AExpSubtracaoExp */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list, false);
            }
            break;
            case 35: /* reduce AExpMultExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list, false);
            }
            break;
            case 36: /* reduce AExpDivExp */
            {
                ArrayList<Object> list = new36();
                push(goTo(12), list, false);
            }
            break;
            case 37: /* reduce AExpModExp */
            {
                ArrayList<Object> list = new37();
                push(goTo(12), list, false);
            }
            break;
            case 38: /* reduce AExpComparaExp */
            {
                ArrayList<Object> list = new38();
                push(goTo(12), list, false);
            }
            break;
            case 39: /* reduce AExpDiferenteExp */
            {
                ArrayList<Object> list = new39();
                push(goTo(12), list, false);
            }
            break;
            case 40: /* reduce AExpMenorIgualExp */
            {
                ArrayList<Object> list = new40();
                push(goTo(12), list, false);
            }
            break;
            case 41: /* reduce AExpMaiorIgualExp */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list, false);
            }
            break;
            case 42: /* reduce AExpMenorExp */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list, false);
            }
            break;
            case 43: /* reduce AExpMaiorExp */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list, false);
            }
            break;
            case 44: /* reduce AExpAndExp */
            {
                ArrayList<Object> list = new44();
                push(goTo(12), list, false);
            }
            break;
            case 45: /* reduce AExpOrExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(12), list, false);
            }
            break;
            case 46: /* reduce AExpXorExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(12), list, false);
            }
            break;
            case 47: /* reduce AExpSymbolExpTerminal */
            {
                ArrayList<Object> list = new47();
                push(goTo(13), list, false);
            }
            break;
            case 48: /* reduce AExpNumberExpTerminal */
            {
                ArrayList<Object> list = new48();
                push(goTo(13), list, false);
            }
            break;
            case 49: /* reduce AExpAnswerExpTerminal */
            {
                ArrayList<Object> list = new49();
                push(goTo(13), list, false);
            }
            break;
            case 50: /* reduce AExpStringExpTerminal */
            {
                ArrayList<Object> list = new50();
                push(goTo(13), list, false);
            }
            break;
            case 51: /* reduce AExpLocalExpTerminal */
            {
                ArrayList<Object> list = new51();
                push(goTo(13), list, false);
            }
            break;
            case 52: /* reduce AExpNotExpTerminal */
            {
                ArrayList<Object> list = new52();
                push(goTo(13), list, false);
            }
            break;
            case 53: /* reduce AExpPareExpTerminal */
            {
                ArrayList<Object> list = new53();
                push(goTo(13), list, false);
            }
            break;
            case 54: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new54();
                push(goTo(14), list, true);
            }
            break;
            case 55: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new55();
                push(goTo(14), list, true);
            }
            break;
            case 56: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new56();
                push(goTo(15), list, true);
            }
            break;
            case 57: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new57();
                push(goTo(15), list, true);
            }
            break;
            case 58: /* reduce ATerminal$ColcheteVector */
            {
                ArrayList<Object> list = new58();
                push(goTo(16), list, true);
            }
            break;
            case 59: /* reduce ANonTerminal$ColcheteVector */
            {
                ArrayList<Object> list = new59();
                push(goTo(16), list, true);
            }
            break;
            case 60: /* reduce ATerminal$LocalVirgula */
            {
                ArrayList<Object> list = new60();
                push(goTo(17), list, true);
            }
            break;
            case 61: /* reduce ANonTerminal$LocalVirgula */
            {
                ArrayList<Object> list = new61();
                push(goTo(17), list, true);
            }
            break;
            case 62: /* reduce ATerminal$ExpVirgula */
            {
                ArrayList<Object> list = new62();
                push(goTo(18), list, true);
            }
            break;
            case 63: /* reduce ANonTerminal$ExpVirgula */
            {
                ArrayList<Object> list = new63();
                push(goTo(18), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramaPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TCode tcodeNode2;
        TId tidNode3;
        PBloco pblocoNode4;
        tcodeNode2 = (TCode)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pblocoNode4 = (PBloco)nodeArrayList3.get(0);

        pprogramaNode1 = new AProgramaPrograma(tcodeNode2, tidNode3, pblocoNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAblocobloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TAbreBloco tabreblocoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TFechaBloco tfechablocoNode5;
        tabreblocoNode2 = (TAbreBloco)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        tfechablocoNode5 = (TFechaBloco)nodeArrayList2.get(0);

        pblocoNode1 = new ABlocoBloco(tabreblocoNode2, listNode3, listNode4, tfechablocoNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAblocobloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TAbreBloco tabreblocoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFechaBloco tfechablocoNode6;
        tabreblocoNode2 = (TAbreBloco)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        tfechablocoNode6 = (TFechaBloco)nodeArrayList3.get(0);

        pblocoNode1 = new ABlocoBloco(tabreblocoNode2, listNode4, listNode5, tfechablocoNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAblocobloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TAbreBloco tabreblocoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFechaBloco tfechablocoNode6;
        tabreblocoNode2 = (TAbreBloco)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tfechablocoNode6 = (TFechaBloco)nodeArrayList3.get(0);

        pblocoNode1 = new ABlocoBloco(tabreblocoNode2, listNode3, listNode5, tfechablocoNode6);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAblocobloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TAbreBloco tabreblocoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFechaBloco tfechablocoNode7;
        tabreblocoNode2 = (TAbreBloco)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tfechablocoNode7 = (TFechaBloco)nodeArrayList4.get(0);

        pblocoNode1 = new ABlocoBloco(tabreblocoNode2, listNode4, listNode6, tfechablocoNode7);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADecAlterableDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TAlterable talterableNode2;
        PTipo ptipoNode3;
        TId tidNode4;
        TPonto tpontoNode5;
        talterableNode2 = (TAlterable)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tpontoNode5 = (TPonto)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new ADecAlterableDeclaracao(talterableNode2, ptipoNode3, tidNode4, tpontoNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAdecunalterabledeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TUnalterable tunalterableNode2;
        PTipoBase ptipobaseNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TPonto tpontoNode7;
        tunalterableNode2 = (TUnalterable)nodeArrayList1.get(0);
        ptipobaseNode3 = (PTipoBase)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tpontoNode7 = (TPonto)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new ADecUnalterableDeclaracao(tunalterableNode2, ptipobaseNode3, tidNode4, null, null, tpontoNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAdecunalterabledeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TUnalterable tunalterableNode2;
        PTipoBase ptipobaseNode3;
        TId tidNode4;
        TAtribuicao tatribuicaoNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        TPonto tpontoNode7;
        tunalterableNode2 = (TUnalterable)nodeArrayList1.get(0);
        ptipobaseNode3 = (PTipoBase)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tatribuicaoNode5 = (TAtribuicao)nodeArrayList4.get(0);
        tpontoNode7 = (TPonto)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new ADecUnalterableDeclaracao(tunalterableNode2, ptipobaseNode3, tidNode4, tatribuicaoNode5, null, tpontoNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAdecunalterabledeclaracao3Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TUnalterable tunalterableNode2;
        PTipoBase ptipobaseNode3;
        TId tidNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        PExp pexpNode6;
        TPonto tpontoNode7;
        tunalterableNode2 = (TUnalterable)nodeArrayList1.get(0);
        ptipobaseNode3 = (PTipoBase)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        pexpNode6 = (PExp)nodeArrayList4.get(0);
        tpontoNode7 = (TPonto)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new ADecUnalterableDeclaracao(tunalterableNode2, ptipobaseNode3, tidNode4, null, pexpNode6, tpontoNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAdecunalterabledeclaracao4Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TUnalterable tunalterableNode2;
        PTipoBase ptipobaseNode3;
        TId tidNode4;
        TAtribuicao tatribuicaoNode5;
        PExp pexpNode6;
        TPonto tpontoNode7;
        tunalterableNode2 = (TUnalterable)nodeArrayList1.get(0);
        ptipobaseNode3 = (PTipoBase)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tatribuicaoNode5 = (TAtribuicao)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tpontoNode7 = (TPonto)nodeArrayList6.get(0);

        pdeclaracaoNode1 = new ADecUnalterableDeclaracao(tunalterableNode2, ptipobaseNode3, tidNode4, tatribuicaoNode5, pexpNode6, tpontoNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANumberTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptipobaseNode1 = new ANumberTipoBase(tnumberNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAnswerTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TAnswer tanswerNode2;
        tanswerNode2 = (TAnswer)nodeArrayList1.get(0);

        ptipobaseNode1 = new AAnswerTipoBase(tanswerNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASymbolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        ptipobaseNode1 = new ASymbolTipoBase(tsymbolNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ATipoBaseTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAtipovectortipo1Tipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        TVector tvectorNode3;
        TColcheteEsq tcolcheteesqNode4;
        PExp pexpNode5;
        TColcheteDir tcolchetedirNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);
        tvectorNode3 = (TVector)nodeArrayList2.get(0);
        tcolcheteesqNode4 = (TColcheteEsq)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tcolchetedirNode6 = (TColcheteDir)nodeArrayList5.get(0);
        {
            // Block
        }

        ptipoNode1 = new ATipoVectorTipo(ptipobaseNode2, tvectorNode3, tcolcheteesqNode4, pexpNode5, tcolchetedirNode6, listNode7);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAtipovectortipo2Tipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        TVector tvectorNode3;
        TColcheteEsq tcolcheteesqNode4;
        PExp pexpNode5;
        TColcheteDir tcolchetedirNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);
        tvectorNode3 = (TVector)nodeArrayList2.get(0);
        tcolcheteesqNode4 = (TColcheteEsq)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tcolchetedirNode6 = (TColcheteDir)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }

        ptipoNode1 = new ATipoVectorTipo(ptipobaseNode2, tvectorNode3, tcolcheteesqNode4, pexpNode5, tcolchetedirNode6, listNode8);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AExpressaoColcheteVector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PColcheteVector pcolchetevectorNode1;
        {
            // Block
        TColcheteEsq tcolcheteesqNode2;
        PExp pexpNode3;
        TColcheteDir tcolchetedirNode4;
        tcolcheteesqNode2 = (TColcheteEsq)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tcolchetedirNode4 = (TColcheteDir)nodeArrayList3.get(0);

        pcolchetevectorNode1 = new AExpressaoColcheteVector(tcolcheteesqNode2, pexpNode3, tcolchetedirNode4);
        }
	nodeList.add(pcolchetevectorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIdLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocal plocalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plocalNode1 = new AIdLocal(tidNode2);
        }
	nodeList.add(plocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADecLocalLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocal plocalNode1;
        {
            // Block
        PLocal plocalNode2;
        TColcheteEsq tcolcheteesqNode3;
        PExp pexpNode4;
        TColcheteDir tcolchetedirNode5;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);
        tcolcheteesqNode3 = (TColcheteEsq)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcolchetedirNode5 = (TColcheteDir)nodeArrayList4.get(0);

        plocalNode1 = new ADecLocalLocal(plocalNode2, tcolcheteesqNode3, pexpNode4, tcolchetedirNode5);
        }
	nodeList.add(plocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALocalVirgulaLocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalVirgula plocalvirgulaNode1;
        {
            // Block
        PLocal plocalNode2;
        TVirgula tvirgulaNode3;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        plocalvirgulaNode1 = new ALocalVirgulaLocalVirgula(plocalNode2, tvirgulaNode3);
        }
	nodeList.add(plocalvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpVirgulaExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpVirgula pexpvirgulaNode1;
        {
            // Block
        PExp pexpNode2;
        TVirgula tvirgulaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pexpvirgulaNode1 = new AExpVirgulaExpVirgula(pexpNode2, tvirgulaNode3);
        }
	nodeList.add(pexpvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAsLongAsLong */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAsLong paslongNode1;
        {
            // Block
        TAs tasNode2;
        TLong tlongNode3;
        tasNode2 = (TAs)nodeArrayList1.get(0);
        tlongNode3 = (TLong)nodeArrayList2.get(0);

        paslongNode1 = new AAsLongAsLong(tasNode2, tlongNode3);
        }
	nodeList.add(paslongNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AExpToExpTo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTo pexptoNode1;
        {
            // Block
        PExp pexpNode2;
        TTo ttoNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        ttoNode3 = (TTo)nodeArrayList2.get(0);

        pexptoNode1 = new AExpToExpTo(pexpNode2, ttoNode3);
        }
	nodeList.add(pexptoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AComandoLocalComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PLocal plocalNode2;
        TAtribuicao tatribuicaoNode3;
        PExp pexpNode4;
        TPonto tpontoNode5;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpontoNode5 = (TPonto)nodeArrayList4.get(0);

        pcomandoNode1 = new AComandoLocalComando(plocalNode2, tatribuicaoNode3, pexpNode4, tpontoNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAcapturecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCapture tcaptureNode2;
        TParEsq tparesqNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PLocal plocalNode5;
        TParDir tpardirNode6;
        TPonto tpontoNode7;
        tcaptureNode2 = (TCapture)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        {
            // Block
        }
        plocalNode5 = (PLocal)nodeArrayList3.get(0);
        tpardirNode6 = (TParDir)nodeArrayList4.get(0);
        tpontoNode7 = (TPonto)nodeArrayList5.get(0);

        pcomandoNode1 = new ACaptureComando(tcaptureNode2, tparesqNode3, listNode4, plocalNode5, tpardirNode6, tpontoNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAcapturecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCapture tcaptureNode2;
        TParEsq tparesqNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PLocal plocalNode6;
        TParDir tpardirNode7;
        TPonto tpontoNode8;
        tcaptureNode2 = (TCapture)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        plocalNode6 = (PLocal)nodeArrayList4.get(0);
        tpardirNode7 = (TParDir)nodeArrayList5.get(0);
        tpontoNode8 = (TPonto)nodeArrayList6.get(0);

        pcomandoNode1 = new ACaptureComando(tcaptureNode2, tparesqNode3, listNode5, plocalNode6, tpardirNode7, tpontoNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAshowcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TShow tshowNode2;
        TParEsq tparesqNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExp pexpNode5;
        TParDir tpardirNode6;
        TPonto tpontoNode7;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        {
            // Block
        }
        pexpNode5 = (PExp)nodeArrayList3.get(0);
        tpardirNode6 = (TParDir)nodeArrayList4.get(0);
        tpontoNode7 = (TPonto)nodeArrayList5.get(0);

        pcomandoNode1 = new AShowComando(tshowNode2, tparesqNode3, listNode4, pexpNode5, tpardirNode6, tpontoNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAshowcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TShow tshowNode2;
        TParEsq tparesqNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PExp pexpNode6;
        TParDir tpardirNode7;
        TPonto tpontoNode8;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        tparesqNode3 = (TParEsq)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pexpNode6 = (PExp)nodeArrayList4.get(0);
        tpardirNode7 = (TParDir)nodeArrayList5.get(0);
        tpontoNode8 = (TPonto)nodeArrayList6.get(0);

        pcomandoNode1 = new AShowComando(tshowNode2, tparesqNode3, listNode5, pexpNode6, tpardirNode7, tpontoNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AInCaseThatComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIn tinNode2;
        TCase tcaseNode3;
        TThat tthatNode4;
        TParEsq tparesqNode5;
        PExp pexpNode6;
        TParDir tpardirNode7;
        TDo tdoNode8;
        PComando pcomandoNode9;
        PComando pcomandoNode10;
        tinNode2 = (TIn)nodeArrayList1.get(0);
        tcaseNode3 = (TCase)nodeArrayList2.get(0);
        tthatNode4 = (TThat)nodeArrayList3.get(0);
        tparesqNode5 = (TParEsq)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tpardirNode7 = (TParDir)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);
        pcomandoNode10 = (PComando)nodeArrayList9.get(0);

        pcomandoNode1 = new AInCaseThatComando(tinNode2, tcaseNode3, tthatNode4, tparesqNode5, pexpNode6, tpardirNode7, tdoNode8, pcomandoNode9, pcomandoNode10);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAsLongAsComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PAsLong paslongNode2;
        TAs tasNode3;
        TParEsq tparesqNode4;
        PExp pexpNode5;
        TParDir tpardirNode6;
        TDo tdoNode7;
        PComando pcomandoNode8;
        paslongNode2 = (PAsLong)nodeArrayList1.get(0);
        tasNode3 = (TAs)nodeArrayList2.get(0);
        tparesqNode4 = (TParEsq)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        tpardirNode6 = (TParDir)nodeArrayList5.get(0);
        tdoNode7 = (TDo)nodeArrayList6.get(0);
        pcomandoNode8 = (PComando)nodeArrayList7.get(0);

        pcomandoNode1 = new AAsLongAsComando(paslongNode2, tasNode3, tparesqNode4, pexpNode5, tpardirNode6, tdoNode7, pcomandoNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AConsideringComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TConsidering tconsideringNode2;
        PLocal plocalNode3;
        TFrom tfromNode4;
        PExpTo pexptoNode5;
        PExp pexpNode6;
        TBy tbyNode7;
        TDo tdoNode8;
        PComando pcomandoNode9;
        tconsideringNode2 = (TConsidering)nodeArrayList1.get(0);
        plocalNode3 = (PLocal)nodeArrayList2.get(0);
        tfromNode4 = (TFrom)nodeArrayList3.get(0);
        pexptoNode5 = (PExpTo)nodeArrayList4.get(0);
        pexpNode6 = (PExp)nodeArrayList5.get(0);
        tbyNode7 = (TBy)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);

        pcomandoNode1 = new AConsideringComando(tconsideringNode2, plocalNode3, tfromNode4, pexptoNode5, pexpNode6, tbyNode7, tdoNode8, pcomandoNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AComandoBlocoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcomandoNode1 = new AComandoBlocoComando(pblocoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AExpTerminalExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpTerminal pexpterminalNode2;
        pexpterminalNode2 = (PExpTerminal)nodeArrayList1.get(0);

        pexpNode1 = new AExpTerminalExp(pexpterminalNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExpSomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TSoma tsomaNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tsomaNode3 = (TSoma)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpSomaExp(pexpNode2, tsomaNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExpSubtracaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenos tmenosNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpSubtracaoExp(pexpNode2, tmenosNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpMultExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMult tmultNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpMultExp(pexpNode2, tmultNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExpDivExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TDiv tdivNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpDivExp(pexpNode2, tdivNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExpModExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMod tmodNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpModExp(pexpNode2, tmodNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExpComparaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TComparacao tcomparacaoNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tcomparacaoNode3 = (TComparacao)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpComparaExp(pexpNode2, tcomparacaoNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExpDiferenteExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TDiferente tdiferenteNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tdiferenteNode3 = (TDiferente)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpDiferenteExp(pexpNode2, tdiferenteNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExpMenorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenorIgual tmenorigualNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenorigualNode3 = (TMenorIgual)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpMenorIgualExp(pexpNode2, tmenorigualNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AExpMaiorIgualExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMaiorIgual tmaiorigualNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmaiorigualNode3 = (TMaiorIgual)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpMaiorIgualExp(pexpNode2, tmaiorigualNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExpMenorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMenor tmenorNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmenorNode3 = (TMenor)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpMenorExp(pexpNode2, tmenorNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpMaiorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TMaior tmaiorNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tmaiorNode3 = (TMaior)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpMaiorExp(pexpNode2, tmaiorNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExpAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TAnd tandNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpAndExp(pexpNode2, tandNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AExpOrExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOr torNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpOrExp(pexpNode2, torNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpXorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TXor txorNode3;
        PExpTerminal pexpterminalNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        txorNode3 = (TXor)nodeArrayList2.get(0);
        pexpterminalNode4 = (PExpTerminal)nodeArrayList3.get(0);

        pexpNode1 = new AExpXorExp(pexpNode2, txorNode3, pexpterminalNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AExpSymbolExpTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTerminal pexpterminalNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        pexpterminalNode1 = new AExpSymbolExpTerminal(tsymbolNode2);
        }
	nodeList.add(pexpterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExpNumberExpTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTerminal pexpterminalNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexpterminalNode1 = new AExpNumberExpTerminal(tnumberNode2);
        }
	nodeList.add(pexpterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExpAnswerExpTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTerminal pexpterminalNode1;
        {
            // Block
        TAnswer tanswerNode2;
        tanswerNode2 = (TAnswer)nodeArrayList1.get(0);

        pexpterminalNode1 = new AExpAnswerExpTerminal(tanswerNode2);
        }
	nodeList.add(pexpterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AExpStringExpTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTerminal pexpterminalNode1;
        {
            // Block
        TVetorSymbol tvetorsymbolNode2;
        tvetorsymbolNode2 = (TVetorSymbol)nodeArrayList1.get(0);

        pexpterminalNode1 = new AExpStringExpTerminal(tvetorsymbolNode2);
        }
	nodeList.add(pexpterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AExpLocalExpTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTerminal pexpterminalNode1;
        {
            // Block
        PLocal plocalNode2;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);

        pexpterminalNode1 = new AExpLocalExpTerminal(plocalNode2);
        }
	nodeList.add(pexpterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpNotExpTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTerminal pexpterminalNode1;
        {
            // Block
        TNot tnotNode2;
        PExpTerminal pexpterminalNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexpterminalNode3 = (PExpTerminal)nodeArrayList2.get(0);

        pexpterminalNode1 = new AExpNotExpTerminal(tnotNode2, pexpterminalNode3);
        }
	nodeList.add(pexpterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExpPareExpTerminal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpTerminal pexpterminalNode1;
        {
            // Block
        TParEsq tparesqNode2;
        PExp pexpNode3;
        TParDir tpardirNode4;
        tparesqNode2 = (TParEsq)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpardirNode4 = (TParDir)nodeArrayList3.get(0);

        pexpterminalNode1 = new AExpPareExpTerminal(tparesqNode2, pexpNode3, tpardirNode4);
        }
	nodeList.add(pexpterminalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ATerminal$ColcheteVector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PColcheteVector pcolchetevectorNode1;
        pcolchetevectorNode1 = (PColcheteVector)nodeArrayList1.get(0);
	if(pcolchetevectorNode1 != null)
	{
	  listNode2.add(pcolchetevectorNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ANonTerminal$ColcheteVector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PColcheteVector pcolchetevectorNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcolchetevectorNode2 = (PColcheteVector)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcolchetevectorNode2 != null)
	{
	  listNode3.add(pcolchetevectorNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATerminal$LocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalVirgula plocalvirgulaNode1;
        plocalvirgulaNode1 = (PLocalVirgula)nodeArrayList1.get(0);
	if(plocalvirgulaNode1 != null)
	{
	  listNode2.add(plocalvirgulaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANonTerminal$LocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalVirgula plocalvirgulaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocalvirgulaNode2 = (PLocalVirgula)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocalvirgulaNode2 != null)
	{
	  listNode3.add(plocalvirgulaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpVirgula pexpvirgulaNode1;
        pexpvirgulaNode1 = (PExpVirgula)nodeArrayList1.get(0);
	if(pexpvirgulaNode1 != null)
	{
	  listNode2.add(pexpvirgulaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpVirgula pexpvirgulaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexpvirgulaNode2 = (PExpVirgula)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexpvirgulaNode2 != null)
	{
	  listNode3.add(pexpvirgulaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {39, SHIFT, 1}, },
			{{-1, ERROR, 1}, {51, SHIFT, 3}, },
			{{-1, ERROR, 2}, {52, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {0, SHIFT, 4}, },
			{{-1, ERROR, 4}, {0, SHIFT, 4}, {1, SHIFT, 6}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {42, SHIFT, 12}, {43, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 7}, {25, SHIFT, 22}, },
			{{-1, ERROR, 8}, {51, SHIFT, 14}, },
			{{-1, ERROR, 9}, {33, SHIFT, 24}, },
			{{-1, ERROR, 10}, {2, SHIFT, 25}, },
			{{-1, ERROR, 11}, {2, SHIFT, 26}, },
			{{-1, ERROR, 12}, {44, SHIFT, 27}, {45, SHIFT, 28}, {46, SHIFT, 29}, },
			{{-1, ERROR, 13}, {44, SHIFT, 27}, {45, SHIFT, 28}, {46, SHIFT, 29}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 17}, {9, SHIFT, 33}, {17, SHIFT, 34}, },
			{{-1, ERROR, 18}, {32, SHIFT, 35}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 20}, {0, SHIFT, 4}, {1, SHIFT, 36}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {42, SHIFT, 12}, {43, SHIFT, 13}, {51, SHIFT, 14}, },
			{{-1, ERROR, 21}, {0, SHIFT, 4}, {1, SHIFT, 39}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {51, SHIFT, 14}, },
			{{-1, ERROR, 22}, {27, SHIFT, 41}, },
			{{-1, ERROR, 23}, {9, SHIFT, 33}, {29, SHIFT, 42}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 25}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 26}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 30}, {51, SHIFT, 57}, },
			{{-1, REDUCE, 13}, {48, SHIFT, 58}, },
			{{-1, ERROR, 32}, {51, SHIFT, 59}, },
			{{-1, ERROR, 33}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 34}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 35}, {2, SHIFT, 62}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 38}, {0, SHIFT, 4}, {1, SHIFT, 63}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 41}, {2, SHIFT, 64}, },
			{{-1, ERROR, 42}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 43}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 44}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, {9, SHIFT, 33}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 51}, {3, SHIFT, 69}, {5, SHIFT, 70}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 53}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 54}, {3, SHIFT, 87}, {5, SHIFT, 88}, {9, SHIFT, 33}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 56}, {51, SHIFT, 14}, },
			{{-1, ERROR, 57}, {2, SHIFT, 43}, {7, SHIFT, 91}, {17, SHIFT, 92}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 58}, {9, SHIFT, 94}, },
			{{-1, ERROR, 59}, {7, SHIFT, 95}, },
			{{-1, ERROR, 60}, {10, SHIFT, 96}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 61}, {7, SHIFT, 97}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 62}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 64}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 65}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 66}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {30, SHIFT, 101}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 67}, {3, SHIFT, 102}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 69}, {7, SHIFT, 103}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 71}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 72}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 73}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 74}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 75}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 76}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 77}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 78}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 79}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 80}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 81}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 82}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 83}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 84}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 86}, {3, SHIFT, 118}, {5, SHIFT, 70}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 87}, {7, SHIFT, 119}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 89}, {3, SHIFT, 120}, {5, SHIFT, 88}, {9, SHIFT, 33}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 92}, {2, SHIFT, 43}, {7, SHIFT, 121}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, ERROR, 93}, {7, SHIFT, 123}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 94}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 98}, {3, SHIFT, 125}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 99}, {3, SHIFT, 126}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 100}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {31, SHIFT, 127}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 118}, {7, SHIFT, 128}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 120}, {7, SHIFT, 129}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 122}, {7, SHIFT, 130}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 124}, {10, SHIFT, 131}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, ERROR, 125}, {38, SHIFT, 132}, },
			{{-1, ERROR, 126}, {38, SHIFT, 133}, },
			{{-1, ERROR, 127}, {38, SHIFT, 134}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 14}, {9, SHIFT, 135}, },
			{{-1, ERROR, 132}, {0, SHIFT, 4}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {51, SHIFT, 14}, },
			{{-1, ERROR, 133}, {0, SHIFT, 4}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {51, SHIFT, 14}, },
			{{-1, ERROR, 134}, {0, SHIFT, 4}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {51, SHIFT, 14}, },
			{{-1, ERROR, 135}, {2, SHIFT, 43}, {36, SHIFT, 44}, {44, SHIFT, 45}, {45, SHIFT, 46}, {46, SHIFT, 47}, {49, SHIFT, 48}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 15}, {9, SHIFT, 135}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 139}, {0, SHIFT, 4}, {24, SHIFT, 7}, {28, SHIFT, 8}, {32, SHIFT, 9}, {40, SHIFT, 10}, {41, SHIFT, 11}, {51, SHIFT, 14}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 141}, {10, SHIFT, 144}, {12, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {15, SHIFT, 74}, {16, SHIFT, 75}, {18, SHIFT, 76}, {19, SHIFT, 77}, {20, SHIFT, 78}, {21, SHIFT, 79}, {22, SHIFT, 80}, {23, SHIFT, 81}, {34, SHIFT, 82}, {35, SHIFT, 83}, {37, SHIFT, 84}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 16}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 15}, {3, 5}, },
			{{-1, 16}, {20, 37}, },
			{{-1, 30}, {13, 31}, },
			{{-1, 32}, },
			{{-1, 136}, {137, 142}, },
			{{-1, 49}, {4, 17}, {8, 23}, {20, 17}, {21, 17}, {26, 54}, {38, 17}, {56, 89}, {132, 17}, {133, 17}, {134, 17}, {139, 17}, },
			{{-1, 55}, {56, 90}, },
			{{-1, 50}, {53, 85}, },
			{{-1, 18}, },
			{{-1, 65}, },
			{{-1, 19}, {21, 40}, {38, 40}, {132, 138}, {133, 139}, {134, 140}, {139, 143}, },
			{{-1, 51}, {33, 60}, {34, 61}, {42, 66}, {43, 67}, {53, 86}, {57, 93}, {62, 98}, {64, 99}, {65, 100}, {92, 122}, {94, 124}, {135, 141}, },
			{{-1, 52}, {44, 68}, {71, 104}, {72, 105}, {73, 106}, {74, 107}, {75, 108}, {76, 109}, {77, 110}, {78, 111}, {79, 112}, {80, 113}, {81, 114}, {82, 115}, {83, 116}, {84, 117}, },
			{{-1, 20}, },
			{{-1, 21}, {20, 38}, },
			{{-1, 137}, },
			{{-1, 56}, },
			{{-1, 53}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: code",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'start'",
			"expecting: 'start', 'finish', 'in', 'considering', 'as', 'show', 'capture', 'unalterable', 'alterable', id",
			"expecting: 'start', 'finish', 'in', 'considering', 'as', 'show', 'capture', id, EOF",
			"expecting: 'case'",
			"expecting: 'long'",
			"expecting: '('",
			"expecting: symbol, 'number', 'answer'",
			"expecting: ')', ',', '.', '[', ']', '+', '-', '*', '/', '%', '<<', '<', '>', '>=', '<=', '==', '!=', 'from', 'to', 'by', 'and', 'or', 'xor'",
			"expecting: 'start', 'finish', 'in', 'considering', 'as', 'show', 'capture', id",
			"expecting: '[', '<<'",
			"expecting: 'as'",
			"expecting: 'that'",
			"expecting: '[', 'from'",
			"expecting: '(', 'not', symbol, 'number', 'answer', vetor symbol, id",
			"expecting: 'vector', id",
			"expecting: ')', ',', '.', ']', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'to', 'by', 'and', 'or', 'xor'",
			"expecting: ')', ',', '.', '[', ']', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'to', 'by', 'and', 'or', 'xor'",
			"expecting: ')', ',', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'and', 'or', 'xor'",
			"expecting: ')', ',', '['",
			"expecting: '(', '.', '<<', 'not', symbol, 'number', 'answer', vetor symbol, id",
			"expecting: '['",
			"expecting: '.'",
			"expecting: ']', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'and', 'or', 'xor'",
			"expecting: '.', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'and', 'or', 'xor'",
			"expecting: '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'to', 'and', 'or', 'xor'",
			"expecting: ')', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'and', 'or', 'xor'",
			"expecting: '(', '.', 'not', symbol, 'number', 'answer', vetor symbol, id",
			"expecting: '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'by', 'and', 'or', 'xor'",
			"expecting: 'do'",
			"expecting: '[', id",
			"expecting: 'start', 'in', 'considering', 'as', 'show', 'capture', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 6, 1, 7, 8, 8, 9, 9, 10, 11, 4, 12, 13, 11, 4, 11, 14, 15, 13, 16, 1, 17, 17, 17, 1, 17, 1, 16, 16, 8, 5, 4, 11, 5, 11, 8, 16, 16, 16, 18, 18, 18, 18, 19, 16, 20, 18, 16, 21, 1, 1, 22, 23, 24, 25, 26, 16, 5, 16, 16, 27, 28, 18, 24, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20, 24, 1, 21, 1, 4, 29, 26, 16, 4, 10, 11, 28, 28, 30, 16, 18, 11, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 24, 11, 24, 4, 26, 4, 25, 31, 31, 31, 11, 11, 4, 32, 33, 33, 33, 16, 32, 32, 11, 33, 11, 25, 32, 11, 32, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
