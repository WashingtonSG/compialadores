/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.parser;

import cida.lexer.*;
import cida.node.*;
import cida.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAPrograma node1 = (PAPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramaPrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAblocobloco1Bloco */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAblocobloco2Bloco */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAblocobloco3Bloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAblocobloco4Bloco */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce ADecAlterableDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAdecunalterabledeclaracao1Declaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AAdecunalterabledeclaracao2Declaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce AAdecunalterabledeclaracao3Declaracao */
            {
                ArrayList<Object> list = new8();
                push(goTo(2), list);
            }
            break;
            case 9: /* reduce AAdecunalterabledeclaracao4Declaracao */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list);
            }
            break;
            case 10: /* reduce ANumberTipoBase */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AAnswerTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce ASymbolTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list);
            }
            break;
            case 13: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AAtipovectortipo1Tipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce AAtipovectortipo2Tipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list);
            }
            break;
            case 16: /* reduce AExpressaoColcheteVector */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce AIdLocal */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce ADecLocalLocal */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce ALocalVirgulaLocalVirgula */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AExpVirgulaExpVirgula */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AInCaseThatSimplesComandoSimples */
            {
                ArrayList<Object> list = new21();
                push(goTo(9), list);
            }
            break;
            case 22: /* reduce AInCaseThatOtherwiseComandoSimples */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce AInCaseCompostoComandoComposto */
            {
                ArrayList<Object> list = new23();
                push(goTo(10), list);
            }
            break;
            case 24: /* reduce AConsideringComandoComposto */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AAsLongAsComandoComposto */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AAcapturecomandocomposto1ComandoComposto */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce AAcapturecomandocomposto2ComandoComposto */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce AAshowcomandocomposto1ComandoComposto */
            {
                ArrayList<Object> list = new28();
                push(goTo(10), list);
            }
            break;
            case 29: /* reduce AAshowcomandocomposto2ComandoComposto */
            {
                ArrayList<Object> list = new29();
                push(goTo(10), list);
            }
            break;
            case 30: /* reduce AComandoLocalComandoComposto */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce AComandoBlocoComandoComposto */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AComandoSimplesComando */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AComandoOtherwiseComando */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AExp1Exp0 */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AXorExp0 */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AExp2Exp1 */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AOrExp1 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AAndExp1 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce AExp2Exp2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce ADiferenteExp2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce AComparacaoExp2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce AExp3Exp3 */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce AMaiorIgualExp3 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce AMenorIgualExp3 */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce AExp5Exp4 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce AMaiorExp4 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AMenorExp4 */
            {
                ArrayList<Object> list = new47();
                push(goTo(16), list);
            }
            break;
            case 48: /* reduce AExp6Exp5 */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce ASubExp5 */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list);
            }
            break;
            case 50: /* reduce ASomaExp5 */
            {
                ArrayList<Object> list = new50();
                push(goTo(17), list);
            }
            break;
            case 51: /* reduce AExp7Exp6 */
            {
                ArrayList<Object> list = new51();
                push(goTo(18), list);
            }
            break;
            case 52: /* reduce AModExp6 */
            {
                ArrayList<Object> list = new52();
                push(goTo(18), list);
            }
            break;
            case 53: /* reduce ADivExp6 */
            {
                ArrayList<Object> list = new53();
                push(goTo(18), list);
            }
            break;
            case 54: /* reduce AMultExp6 */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce AExp8Exp7 */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list);
            }
            break;
            case 56: /* reduce ANotExp7 */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce AMenosExp7 */
            {
                ArrayList<Object> list = new57();
                push(goTo(19), list);
            }
            break;
            case 58: /* reduce ANumberExp8 */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list);
            }
            break;
            case 59: /* reduce ASymbolExp8 */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list);
            }
            break;
            case 60: /* reduce AAnswerExp8 */
            {
                ArrayList<Object> list = new60();
                push(goTo(20), list);
            }
            break;
            case 61: /* reduce AVetorSymbolExp8 */
            {
                ArrayList<Object> list = new61();
                push(goTo(20), list);
            }
            break;
            case 62: /* reduce ALocalExp8 */
            {
                ArrayList<Object> list = new62();
                push(goTo(20), list);
            }
            break;
            case 63: /* reduce AParenExp8 */
            {
                ArrayList<Object> list = new63();
                push(goTo(20), list);
            }
            break;
            case 64: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new64();
                push(goTo(21), list);
            }
            break;
            case 65: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new65();
                push(goTo(21), list);
            }
            break;
            case 66: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new66();
                push(goTo(22), list);
            }
            break;
            case 67: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new67();
                push(goTo(22), list);
            }
            break;
            case 68: /* reduce ATerminal$ColcheteVector */
            {
                ArrayList<Object> list = new68();
                push(goTo(23), list);
            }
            break;
            case 69: /* reduce ANonTerminal$ColcheteVector */
            {
                ArrayList<Object> list = new69();
                push(goTo(23), list);
            }
            break;
            case 70: /* reduce ATerminal$LocalVirgula */
            {
                ArrayList<Object> list = new70();
                push(goTo(24), list);
            }
            break;
            case 71: /* reduce ANonTerminal$LocalVirgula */
            {
                ArrayList<Object> list = new71();
                push(goTo(24), list);
            }
            break;
            case 72: /* reduce ATerminal$ExpVirgula */
            {
                ArrayList<Object> list = new72();
                push(goTo(25), list);
            }
            break;
            case 73: /* reduce ANonTerminal$ExpVirgula */
            {
                ArrayList<Object> list = new73();
                push(goTo(25), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramaPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        TId tidNode2;
        PABloco pablocoNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pablocoNode3 = (PABloco)nodeArrayList3.get(0);

        paprogramaNode1 = new AAProgramaAPrograma(tidNode2, pablocoNode3);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAblocobloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pablocoNode1 = new ABlocoABloco(listNode2, listNode3);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAblocobloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pablocoNode1 = new ABlocoABloco(listNode3, listNode4);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAblocobloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pablocoNode1 = new ABlocoABloco(listNode2, listNode4);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAblocobloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pablocoNode1 = new ABlocoABloco(listNode3, listNode5);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADecAlterableDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipo patipoNode2;
        TId tidNode3;
        patipoNode2 = (PATipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new ADecAlterableADeclaracao(patipoNode2, tidNode3);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAdecunalterabledeclaracao1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipoBase patipobaseNode2;
        TId tidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        patipobaseNode2 = (PATipoBase)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new ADecUnalterableADeclaracao(patipobaseNode2, tidNode3, null);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAdecunalterabledeclaracao2Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipoBase patipobaseNode2;
        TId tidNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        patipobaseNode2 = (PATipoBase)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new ADecUnalterableADeclaracao(patipobaseNode2, tidNode3, null);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAdecunalterabledeclaracao3Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipoBase patipobaseNode2;
        TId tidNode3;
        PExpr pexprNode4;
        patipobaseNode2 = (PATipoBase)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        pexprNode4 = (PExpr)nodeArrayList4.get(0);

        padeclaracaoNode1 = new ADecUnalterableADeclaracao(patipobaseNode2, tidNode3, pexprNode4);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAdecunalterabledeclaracao4Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipoBase patipobaseNode2;
        TId tidNode3;
        PExpr pexprNode4;
        patipobaseNode2 = (PATipoBase)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        pexprNode4 = (PExpr)nodeArrayList5.get(0);

        padeclaracaoNode1 = new ADecUnalterableADeclaracao(patipobaseNode2, tidNode3, pexprNode4);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ANumberTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipoBase patipobaseNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        patipobaseNode1 = new ANumberATipoBase(tnumberNode2);
        }
	nodeList.add(patipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAnswerTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipoBase patipobaseNode1;
        {
            // Block
        TAnswer tanswerNode2;
        tanswerNode2 = (TAnswer)nodeArrayList1.get(0);

        patipobaseNode1 = new AAnswerATipoBase(tanswerNode2);
        }
	nodeList.add(patipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ASymbolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipoBase patipobaseNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        patipobaseNode1 = new ASymbolATipoBase(tsymbolNode2);
        }
	nodeList.add(patipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        PATipoBase patipobaseNode2;
        patipobaseNode2 = (PATipoBase)nodeArrayList1.get(0);

        patipoNode1 = new ATipoBaseATipo(patipobaseNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAtipovectortipo1Tipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        PATipo patipoNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        patipoNode2 = (PATipo)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        {
            // Block
        }

        patipoNode1 = new ATipoVectorATipo(patipoNode2, pexprNode3, listNode4);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAtipovectortipo2Tipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        PATipo patipoNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        patipoNode2 = (PATipo)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList6.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        patipoNode1 = new ATipoVectorATipo(patipoNode2, pexprNode3, listNode5);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AExpressaoColcheteVector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAColcheteVector pacolchetevectorNode1;
        {
            // Block
        TColcheteEsq tcolcheteesqNode2;
        PExpr pexprNode3;
        TColcheteDir tcolchetedirNode4;
        tcolcheteesqNode2 = (TColcheteEsq)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tcolchetedirNode4 = (TColcheteDir)nodeArrayList3.get(0);

        pacolchetevectorNode1 = new AExpressaoAColcheteVector(tcolcheteesqNode2, pexprNode3, tcolchetedirNode4);
        }
	nodeList.add(pacolchetevectorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AIdLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALocal palocalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        palocalNode1 = new AIdALocal(tidNode2);
        }
	nodeList.add(palocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ADecLocalLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALocal palocalNode1;
        {
            // Block
        PALocal palocalNode2;
        PExpr pexprNode3;
        palocalNode2 = (PALocal)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        palocalNode1 = new ADecLocalALocal(palocalNode2, pexprNode3);
        }
	nodeList.add(palocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ALocalVirgulaLocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALocalVirgula palocalvirgulaNode1;
        {
            // Block
        PALocal palocalNode2;
        TVirgula tvirgulaNode3;
        palocalNode2 = (PALocal)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        palocalvirgulaNode1 = new ALocalVirgulaALocalVirgula(palocalNode2, tvirgulaNode3);
        }
	nodeList.add(palocalvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpVirgulaExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpVirgula paexpvirgulaNode1;
        {
            // Block
        PExpr pexprNode2;
        TVirgula tvirgulaNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        paexpvirgulaNode1 = new AExpVirgulaAExpVirgula(pexprNode2, tvirgulaNode3);
        }
	nodeList.add(paexpvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AInCaseThatSimplesComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoSimples pacomandosimplesNode1;
        {
            // Block
        PExpr pexprNode2;
        PAComando pacomandoNode3;
        pexprNode2 = (PExpr)nodeArrayList5.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList8.get(0);

        pacomandosimplesNode1 = new AInCaseThatSimplesAComandoSimples(pexprNode2, pacomandoNode3);
        }
	nodeList.add(pacomandosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AInCaseThatOtherwiseComandoSimples */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoSimples pacomandosimplesNode1;
        {
            // Block
        PExpr pexprNode2;
        PAComandoComposto pacomandocompostoNode3;
        PAComandoSimples pacomandosimplesNode4;
        pexprNode2 = (PExpr)nodeArrayList5.get(0);
        pacomandocompostoNode3 = (PAComandoComposto)nodeArrayList8.get(0);
        pacomandosimplesNode4 = (PAComandoSimples)nodeArrayList10.get(0);

        pacomandosimplesNode1 = new AInCaseThatOtherwiseAComandoSimples(pexprNode2, pacomandocompostoNode3, pacomandosimplesNode4);
        }
	nodeList.add(pacomandosimplesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AInCaseCompostoComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        PExpr pexprNode2;
        PAComandoComposto pacomandocompostoNode3;
        PAComandoComposto pacomandocompostoNode4;
        pexprNode2 = (PExpr)nodeArrayList5.get(0);
        pacomandocompostoNode3 = (PAComandoComposto)nodeArrayList8.get(0);
        pacomandocompostoNode4 = (PAComandoComposto)nodeArrayList10.get(0);

        pacomandocompostoNode1 = new AInCaseCompostoAComandoComposto(pexprNode2, pacomandocompostoNode3, pacomandocompostoNode4);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AConsideringComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        PALocal palocalNode2;
        PExpr pexprNode3;
        PExpr pexprNode4;
        PExpr pexprNode5;
        PAComandoComposto pacomandocompostoNode6;
        palocalNode2 = (PALocal)nodeArrayList2.get(0);
        pexprNode3 = (PExpr)nodeArrayList4.get(0);
        pexprNode4 = (PExpr)nodeArrayList6.get(0);
        pexprNode5 = (PExpr)nodeArrayList8.get(0);
        pacomandocompostoNode6 = (PAComandoComposto)nodeArrayList10.get(0);

        pacomandocompostoNode1 = new AConsideringAComandoComposto(palocalNode2, pexprNode3, pexprNode4, pexprNode5, pacomandocompostoNode6);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAsLongAsComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        PExpr pexprNode2;
        PAComandoComposto pacomandocompostoNode3;
        pexprNode2 = (PExpr)nodeArrayList5.get(0);
        pacomandocompostoNode3 = (PAComandoComposto)nodeArrayList8.get(0);

        pacomandocompostoNode1 = new AAsLongAsAComandoComposto(pexprNode2, pacomandocompostoNode3);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAcapturecomandocomposto1ComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PALocal palocalNode3;
        {
            // Block
        }
        palocalNode3 = (PALocal)nodeArrayList3.get(0);

        pacomandocompostoNode1 = new ACaptureAComandoComposto(listNode2, palocalNode3);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAcapturecomandocomposto2ComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PALocal palocalNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        palocalNode4 = (PALocal)nodeArrayList4.get(0);

        pacomandocompostoNode1 = new ACaptureAComandoComposto(listNode3, palocalNode4);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAshowcomandocomposto1ComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        PExpr pexprNode3;
        {
            // Block
        }
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pacomandocompostoNode1 = new AShowAComandoComposto(listNode2, pexprNode3);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AAshowcomandocomposto2ComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExpr pexprNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexprNode4 = (PExpr)nodeArrayList4.get(0);

        pacomandocompostoNode1 = new AShowAComandoComposto(listNode3, pexprNode4);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AComandoLocalComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        PALocal palocalNode2;
        PExpr pexprNode3;
        palocalNode2 = (PALocal)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pacomandocompostoNode1 = new AComandoLocalAComandoComposto(palocalNode2, pexprNode3);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AComandoBlocoComandoComposto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComandoComposto pacomandocompostoNode1;
        {
            // Block
        PABloco pablocoNode2;
        pablocoNode2 = (PABloco)nodeArrayList1.get(0);

        pacomandocompostoNode1 = new AComandoBlocoAComandoComposto(pablocoNode2);
        }
	nodeList.add(pacomandocompostoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AComandoSimplesComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAComandoSimples pacomandosimplesNode2;
        pacomandosimplesNode2 = (PAComandoSimples)nodeArrayList1.get(0);

        pacomandoNode1 = new AComandoSimplesAComando(pacomandosimplesNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AComandoOtherwiseComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAComandoComposto pacomandocompostoNode2;
        pacomandocompostoNode2 = (PAComandoComposto)nodeArrayList1.get(0);

        pacomandoNode1 = new AComandoOtherwiseAComando(pacomandocompostoNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExp1Exp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AXorExp0 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AXorExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExp2Exp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AOrExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AAndExp1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAndExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExp2Exp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ADiferenteExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADiferenteExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AComparacaoExp2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AComparacaoExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExp3Exp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMaiorIgualExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMaiorIgualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMenorIgualExp3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMenorIgualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AExp5Exp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMaiorExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMaiorExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AMenorExp4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMenorExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AExp6Exp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASubExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASubExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ASomaExp5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASomaExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AExp7Exp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AModExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ADivExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AMultExp6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AExp8Exp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANotExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANotExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AMenosExp7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new AMenosExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ANumberExp8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pexprNode1 = new ANumberExpr(tnumberNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ASymbolExp8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        pexprNode1 = new ASymbolExpr(tsymbolNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAnswerExp8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TAnswer tanswerNode2;
        tanswerNode2 = (TAnswer)nodeArrayList1.get(0);

        pexprNode1 = new AAnswerExpr(tanswerNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AVetorSymbolExp8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TVetorSymbol tvetorsymbolNode2;
        tvetorsymbolNode2 = (TVetorSymbol)nodeArrayList1.get(0);

        pexprNode1 = new AVetorSymbolExpr(tvetorsymbolNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ALocalExp8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PALocal palocalNode2;
        palocalNode2 = (PALocal)nodeArrayList1.get(0);

        pexprNode1 = new ALocalExpr(palocalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AParenExp8 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new AParenExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADeclaracao padeclaracaoNode1;
        padeclaracaoNode1 = (PADeclaracao)nodeArrayList1.get(0);
	if(padeclaracaoNode1 != null)
	{
	  listNode2.add(padeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADeclaracao padeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padeclaracaoNode2 != null)
	{
	  listNode3.add(padeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	if(pacomandoNode1 != null)
	{
	  listNode2.add(pacomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAComando pacomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pacomandoNode2 = (PAComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pacomandoNode2 != null)
	{
	  listNode3.add(pacomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$ColcheteVector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAColcheteVector pacolchetevectorNode1;
        pacolchetevectorNode1 = (PAColcheteVector)nodeArrayList1.get(0);
	if(pacolchetevectorNode1 != null)
	{
	  listNode2.add(pacolchetevectorNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$ColcheteVector */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAColcheteVector pacolchetevectorNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pacolchetevectorNode2 = (PAColcheteVector)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pacolchetevectorNode2 != null)
	{
	  listNode3.add(pacolchetevectorNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ATerminal$LocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PALocalVirgula palocalvirgulaNode1;
        palocalvirgulaNode1 = (PALocalVirgula)nodeArrayList1.get(0);
	if(palocalvirgulaNode1 != null)
	{
	  listNode2.add(palocalvirgulaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ANonTerminal$LocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PALocalVirgula palocalvirgulaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        palocalvirgulaNode2 = (PALocalVirgula)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(palocalvirgulaNode2 != null)
	{
	  listNode3.add(palocalvirgulaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ATerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAExpVirgula paexpvirgulaNode1;
        paexpvirgulaNode1 = (PAExpVirgula)nodeArrayList1.get(0);
	if(paexpvirgulaNode1 != null)
	{
	  listNode2.add(paexpvirgulaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ANonTerminal$ExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAExpVirgula paexpvirgulaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paexpvirgulaNode2 = (PAExpVirgula)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paexpvirgulaNode2 != null)
	{
	  listNode3.add(paexpvirgulaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {38, SHIFT, 1}, },
			{{-1, ERROR, 1}, {49, SHIFT, 3}, },
			{{-1, ERROR, 2}, {50, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {0, SHIFT, 4}, },
			{{-1, ERROR, 4}, {0, SHIFT, 4}, {1, SHIFT, 6}, {23, SHIFT, 7}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {41, SHIFT, 12}, {42, SHIFT, 13}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 7}, {24, SHIFT, 23}, },
			{{-1, ERROR, 8}, {49, SHIFT, 14}, },
			{{-1, ERROR, 9}, {32, SHIFT, 25}, },
			{{-1, ERROR, 10}, {2, SHIFT, 26}, },
			{{-1, ERROR, 11}, {2, SHIFT, 27}, },
			{{-1, ERROR, 12}, {43, SHIFT, 28}, {44, SHIFT, 29}, {45, SHIFT, 30}, },
			{{-1, ERROR, 13}, {43, SHIFT, 28}, {44, SHIFT, 29}, {45, SHIFT, 30}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 17}, {9, SHIFT, 34}, {16, SHIFT, 35}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 21}, {0, SHIFT, 4}, {1, SHIFT, 36}, {23, SHIFT, 7}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {41, SHIFT, 12}, {42, SHIFT, 13}, {49, SHIFT, 14}, },
			{{-1, ERROR, 22}, {0, SHIFT, 4}, {1, SHIFT, 39}, {23, SHIFT, 7}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
			{{-1, ERROR, 23}, {26, SHIFT, 41}, },
			{{-1, ERROR, 24}, {9, SHIFT, 34}, {28, SHIFT, 42}, },
			{{-1, ERROR, 25}, {31, SHIFT, 43}, },
			{{-1, ERROR, 26}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 27}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 31}, {49, SHIFT, 66}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 33}, {46, SHIFT, 67}, {49, SHIFT, 68}, },
			{{-1, ERROR, 34}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 35}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 38}, {0, SHIFT, 4}, {1, SHIFT, 71}, {23, SHIFT, 7}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 41}, {2, SHIFT, 72}, },
			{{-1, ERROR, 42}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 43}, {2, SHIFT, 74}, },
			{{-1, ERROR, 44}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 45}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 46}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, {9, SHIFT, 34}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 53}, {3, SHIFT, 78}, {5, SHIFT, 79}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 34}, {33, SHIFT, 81}, {34, SHIFT, 82}, },
			{{-1, REDUCE, 36}, {21, SHIFT, 83}, {22, SHIFT, 84}, },
			{{-1, REDUCE, 39}, {19, SHIFT, 85}, {20, SHIFT, 86}, },
			{{-1, REDUCE, 42}, {17, SHIFT, 87}, {18, SHIFT, 88}, },
			{{-1, REDUCE, 45}, {11, SHIFT, 89}, {12, SHIFT, 90}, },
			{{-1, REDUCE, 48}, {13, SHIFT, 91}, {14, SHIFT, 92}, {15, SHIFT, 93}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 62}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 63}, {3, SHIFT, 96}, {5, SHIFT, 97}, {9, SHIFT, 34}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 65}, {49, SHIFT, 14}, },
			{{-1, ERROR, 66}, {2, SHIFT, 44}, {7, SHIFT, 100}, {12, SHIFT, 45}, {16, SHIFT, 101}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 67}, {9, SHIFT, 103}, },
			{{-1, ERROR, 68}, {7, SHIFT, 104}, },
			{{-1, ERROR, 69}, {10, SHIFT, 105}, {36, SHIFT, 80}, },
			{{-1, ERROR, 70}, {7, SHIFT, 106}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 72}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 73}, {29, SHIFT, 108}, {36, SHIFT, 80}, },
			{{-1, ERROR, 74}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 75}, {3, SHIFT, 110}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 78}, {7, SHIFT, 111}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 80}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 81}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 82}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 83}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 84}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 85}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 86}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 87}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 88}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 89}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 90}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 91}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 92}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 93}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 95}, {3, SHIFT, 126}, {5, SHIFT, 79}, {36, SHIFT, 80}, },
			{{-1, ERROR, 96}, {7, SHIFT, 127}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 98}, {3, SHIFT, 128}, {5, SHIFT, 97}, {9, SHIFT, 34}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 101}, {2, SHIFT, 44}, {7, SHIFT, 129}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 102}, {7, SHIFT, 131}, {36, SHIFT, 80}, },
			{{-1, ERROR, 103}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 107}, {3, SHIFT, 133}, {36, SHIFT, 80}, },
			{{-1, ERROR, 108}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 109}, {3, SHIFT, 135}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 35}, {33, SHIFT, 81}, {34, SHIFT, 82}, },
			{{-1, REDUCE, 38}, {21, SHIFT, 83}, {22, SHIFT, 84}, },
			{{-1, REDUCE, 37}, {21, SHIFT, 83}, {22, SHIFT, 84}, },
			{{-1, REDUCE, 41}, {19, SHIFT, 85}, {20, SHIFT, 86}, },
			{{-1, REDUCE, 40}, {19, SHIFT, 85}, {20, SHIFT, 86}, },
			{{-1, REDUCE, 43}, {17, SHIFT, 87}, {18, SHIFT, 88}, },
			{{-1, REDUCE, 44}, {17, SHIFT, 87}, {18, SHIFT, 88}, },
			{{-1, REDUCE, 47}, {11, SHIFT, 89}, {12, SHIFT, 90}, },
			{{-1, REDUCE, 46}, {11, SHIFT, 89}, {12, SHIFT, 90}, },
			{{-1, REDUCE, 50}, {13, SHIFT, 91}, {14, SHIFT, 92}, {15, SHIFT, 93}, },
			{{-1, REDUCE, 49}, {13, SHIFT, 91}, {14, SHIFT, 92}, {15, SHIFT, 93}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 126}, {7, SHIFT, 136}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 128}, {7, SHIFT, 137}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 130}, {7, SHIFT, 138}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 132}, {10, SHIFT, 139}, {36, SHIFT, 80}, },
			{{-1, ERROR, 133}, {37, SHIFT, 140}, },
			{{-1, ERROR, 134}, {30, SHIFT, 141}, {36, SHIFT, 80}, },
			{{-1, ERROR, 135}, {37, SHIFT, 142}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 14}, {9, SHIFT, 143}, },
			{{-1, ERROR, 140}, {0, SHIFT, 4}, {23, SHIFT, 7}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
			{{-1, ERROR, 141}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 142}, {0, SHIFT, 4}, {23, SHIFT, 149}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
			{{-1, ERROR, 143}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 15}, {9, SHIFT, 143}, },
			{{-1, REDUCE, 33}, {25, SHIFT, 153}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 148}, {36, SHIFT, 80}, {37, SHIFT, 154}, },
			{{-1, ERROR, 149}, {24, SHIFT, 155}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 151}, {10, SHIFT, 156}, {36, SHIFT, 80}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 153}, {0, SHIFT, 4}, {23, SHIFT, 7}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
			{{-1, ERROR, 154}, {0, SHIFT, 4}, {23, SHIFT, 149}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
			{{-1, ERROR, 155}, {26, SHIFT, 160}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 160}, {2, SHIFT, 161}, },
			{{-1, ERROR, 161}, {2, SHIFT, 44}, {12, SHIFT, 45}, {35, SHIFT, 46}, {43, SHIFT, 47}, {44, SHIFT, 48}, {45, SHIFT, 49}, {47, SHIFT, 50}, {49, SHIFT, 14}, },
			{{-1, ERROR, 162}, {3, SHIFT, 163}, {36, SHIFT, 80}, },
			{{-1, ERROR, 163}, {37, SHIFT, 164}, },
			{{-1, ERROR, 164}, {0, SHIFT, 4}, {23, SHIFT, 149}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
			{{-1, ERROR, 165}, {25, SHIFT, 166}, },
			{{-1, ERROR, 166}, {0, SHIFT, 4}, {23, SHIFT, 149}, {27, SHIFT, 8}, {31, SHIFT, 9}, {39, SHIFT, 10}, {40, SHIFT, 11}, {49, SHIFT, 14}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 15}, {3, 5}, },
			{{-1, 16}, {21, 37}, },
			{{-1, 31}, {13, 32}, },
			{{-1, 33}, },
			{{-1, 144}, {145, 152}, },
			{{-1, 51}, {4, 17}, {8, 24}, {21, 17}, {22, 17}, {27, 63}, {38, 17}, {65, 98}, {140, 17}, {142, 17}, {153, 17}, {154, 17}, {164, 17}, {166, 17}, },
			{{-1, 64}, {65, 99}, },
			{{-1, 52}, {62, 94}, },
			{{-1, 18}, {153, 157}, },
			{{-1, 19}, {140, 146}, {142, 150}, {153, 158}, {154, 159}, {164, 165}, {166, 158}, },
			{{-1, 20}, {22, 40}, {38, 40}, {140, 147}, },
			{{-1, 53}, {34, 69}, {35, 70}, {42, 73}, {44, 75}, {62, 95}, {66, 102}, {72, 107}, {74, 109}, {101, 130}, {103, 132}, {108, 134}, {141, 148}, {143, 151}, {161, 162}, },
			{{-1, 54}, {80, 112}, },
			{{-1, 55}, {81, 113}, {82, 114}, },
			{{-1, 56}, {83, 115}, {84, 116}, },
			{{-1, 57}, {85, 117}, {86, 118}, },
			{{-1, 58}, {87, 119}, {88, 120}, },
			{{-1, 59}, {89, 121}, {90, 122}, },
			{{-1, 60}, {45, 76}, {46, 77}, {91, 123}, {92, 124}, {93, 125}, },
			{{-1, 61}, },
			{{-1, 21}, },
			{{-1, 22}, {21, 38}, },
			{{-1, 145}, },
			{{-1, 65}, },
			{{-1, 62}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: code",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'start'",
			"expecting: 'start', 'finish', 'in', 'considering', 'as', 'show', 'capture', 'unalterable', 'alterable', id",
			"expecting: 'start', 'finish', 'in', 'otherwise', 'considering', 'as', 'show', 'capture', id, EOF",
			"expecting: 'case'",
			"expecting: 'long'",
			"expecting: '('",
			"expecting: symbol, number, answer",
			"expecting: ')', ',', '.', '[', ']', '+', '-', '*', '/', '%', '<<', '<', '>', '>=', '<=', '==', '!=', 'from', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: 'start', 'finish', 'in', 'otherwise', 'considering', 'as', 'show', 'capture', id",
			"expecting: '[', '<<'",
			"expecting: 'start', 'finish', 'in', 'considering', 'as', 'show', 'capture', id",
			"expecting: 'that'",
			"expecting: '[', 'from'",
			"expecting: 'as'",
			"expecting: '(', '-', 'not', symbol, number, answer, vetor symbol, id",
			"expecting: 'vector', id",
			"expecting: ')', ',', '.', ']', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: ')', ',', '.', '[', ']', '+', '-', '*', '/', '%', '<', '>', '>=', '<=', '==', '!=', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: ')', ',', 'xor'",
			"expecting: ')', ',', '.', ']', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: ')', ',', '.', ']', '==', '!=', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: ')', ',', '.', ']', '>=', '<=', '==', '!=', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: ')', ',', '.', ']', '<', '>', '>=', '<=', '==', '!=', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: ')', ',', '.', ']', '+', '-', '<', '>', '>=', '<=', '==', '!=', 'to', 'by', 'and', 'or', 'xor', 'do'",
			"expecting: ')', ',', '['",
			"expecting: '(', '.', '-', '<<', 'not', symbol, number, answer, vetor symbol, id",
			"expecting: '['",
			"expecting: '.'",
			"expecting: ']', 'xor'",
			"expecting: '.', 'xor'",
			"expecting: 'to', 'xor'",
			"expecting: ')', 'xor'",
			"expecting: '(', '.', '-', 'not', symbol, number, answer, vetor symbol, id",
			"expecting: 'do'",
			"expecting: 'by', 'xor'",
			"expecting: '[', 'vector', id",
			"expecting: 'start', 'in', 'considering', 'as', 'show', 'capture', id",
			"expecting: 'xor', 'do'",
			"expecting: 'otherwise'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 6, 1, 7, 8, 8, 9, 9, 10, 11, 4, 12, 13, 13, 13, 4, 13, 14, 15, 16, 17, 1, 18, 18, 18, 1, 18, 18, 17, 17, 5, 4, 13, 5, 13, 8, 17, 8, 17, 17, 17, 19, 19, 19, 19, 20, 17, 21, 22, 23, 24, 25, 26, 19, 19, 19, 17, 27, 1, 1, 28, 29, 30, 31, 32, 5, 17, 33, 17, 34, 19, 19, 30, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 21, 30, 1, 27, 1, 4, 35, 32, 17, 4, 10, 11, 34, 17, 34, 19, 11, 22, 23, 23, 24, 24, 25, 25, 26, 26, 19, 19, 19, 19, 19, 30, 11, 30, 4, 32, 4, 31, 36, 37, 36, 11, 11, 4, 38, 39, 17, 39, 17, 38, 38, 11, 13, 40, 6, 11, 31, 38, 39, 39, 14, 38, 13, 11, 11, 8, 17, 34, 36, 39, 41, 39, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
