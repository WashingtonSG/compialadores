Package cida;

Helpers
 digito = ['0' .. '9'];
 minusculo = ['a' .. 'z'];
 maiusculo = ['A' .. 'Z'];
 letra = (maiusculo | minusculo);
 letras = letra*;
 digitos = digito*;
 numero_real = digitos+'.'+digitos;
 letras_ou_digitos = letras | digitos;
 underline = '_';
 espaco = ' ';
 tudo_unicode = [0..0xffff];
 string_input = [tudo_unicode - ['''+'"']];
 comentario_blc = [tudo_unicode - '{'];
 answer = 'yes' | 'no';
 rc = 13;
 nl = 10;
 ht	= 0x0009;
 lf	= 0x000a;
 ff	= 0x000c;
 cr	= 0x000d;
 eol = cr | nl | cr | nl ;
 blank = rc | nl | ht | lf | ff | cr ;
 tipos = 'symbol' | 'number' | 'answer';
 dimensao = '[' digito ']';
 
Tokens
 // Delimitadores
 abre_bloco = 'start';
 fecha_bloco = 'finish';
 par_esq = '(';
 par_dir = ')';
 dois_pontos = ':';
 virgula = ',';
 ponto_virgula = ';';
 ponto = '.';
 aspas = '"';
 
  // Operacoes Matematicas e Logicas
 numeros = digitos | numero_real;
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 atribuicao = '=';
 
 // Operacoes Logicas
 menor = '<';
 menor_igual = '<=';
 comparacao = '==';
 negacao = '!';
 dois_maior = '>>';
 
 // Tokens de Controle
  in_case = 'in case that'; 
  considering = 'considering';
  as_long_as = 'as long as';
 
 code = ('code' [tudo_unicode-[cr+nl]]*);
 show = 'show';
 
 // Comentarios
 comentario_linha = ('--'[tudo_unicode-[cr+nl]]*);
 comentario_bloco = ('{-'comentario_blc*'-}');

// Identificadores
 id = letras ;

// Modificadores
 modificadores = 'unalterable' | 'alterable' ;

// Tipos primitivos
 symbol = 'tudo_unicode';
 number = digitos numero_real;
 answer = 'yes'|'no' ;

// Vetores
 vetor_symbol = '"' tudo_unicode* '"';
 vetores = tipos dimensao+ letras;
 
// Vazio
 vazio = (espaco | '\t' | '\n' | '\r' | blank )+;
 
Ignored Tokens
 comentario_bloco,
 comentario_linha,
 vazio;

 