Package cida;

Helpers
 digito = ['0' .. '9'];
 minusculo = ['a' .. 'z'];
 maiusculo = ['A' .. 'Z'];
 letra = (maiusculo | minusculo);
 letras = letra*;
 digitos = digito*;
 decimal = digito+;
 numero_real = digitos '.' decimal;
 letras_ou_digitos = letras | digitos;
 underline = '_';
 espaco = ' ';
 tudo_unicode = [0..0xffff];
 string_input = [tudo_unicode - ['''+'"']];
 comentario_blc = [tudo_unicode - '{'];
 boolean = 'yes' | 'no';
 rc = 13;
 nl = 10;
 ht	= 0x0009;
 lf	= 0x000a;
 ff	= 0x000c;
 cr	= 0x000d;
 eol = cr | nl | cr | nl ;
 blank = rc | nl | ht | lf | ff | cr ;
 tipos = 'symbol' | 'number' | 'answer';
 dimensao = '[' digito ']';
 
 
Tokens
 // Delimitadores
 abre_bloco = 'start';
 fecha_bloco = 'finish';
 par_esq = '(';
 par_dir = ')';
 dois_pontos = ':';
 virgula = ',';
 ponto_virgula = ';';
 ponto = '.';
 aspas = '"';
 colchete_esq = '[';
 colchete_dir = ']';
 
 
  // Operacoes Matematicas e Logicas
 numeros = digitos | numero_real;
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 atribuicao = '<<';
 
 // Operacoes Logicas
 menor = '<';
 maior = '>';
 maior_igual = '>=';
 menor_igual = '<=';
 comparacao = '==';
 diferente = '!=';
 
 // Tokens de Controle
  in = 'in';
  case = 'case'; 
  otherwise = 'otherwise';
  that = 'that';
  considering = 'considering';
  from = 'from';
  to = 'to';
  by = 'by';
  as = 'as';
  long = 'long';
  and = 'and';
  or = 'or';
  not = 'not';
  xor = 'xor';
  do = 'do';
 
 code = 'code' (string_input);
 show = 'show';
 capture = 'capture';
 
 // Comentarios
 comentario_linha = ('--'[tudo_unicode-[cr+nl]]*);
 comentario_bloco = ('{-'comentario_blc*'-}');
 
 unalterable = 'unalterable';
 alterable = 'alterable';
 
 // Tipos primitivos
 symbol = ''' (string_input) ''';
 number = 'number';
 answer = 'answer';
 booleano = boolean;
 vector = 'vector';

// Vetores
 vetor_symbol = '"' (string_input)* '"';
 vetores = tipos dimensao+ letras;
 
// Identificadores
 id = letras ;

 
// Vazio
 vazio = (espaco | '\t' | '\n' | '\r' | blank )+;
 
Ignored Tokens
 comentario_bloco,
 comentario_linha,
 vazio;
 

Productions
    programa = {programa} code id bloco;

    bloco = {bloco} abre_bloco declaracao* comando* fecha_bloco;
    
    declaracao =
        {dec_alterable} alterable tipo id ponto
        |{dec_unalterable} unalterable tipo_base id atribuicao? exp? ponto;
    
        
    tipo_base =
        {number} number
        |{answer} answer
        |{symbol} symbol;
        
    tipo = 
        {tipo_base} tipo_base
        |{tipo_vector} tipo_base vector colchete_esq exp colchete_dir colchete_vector*;

	colchete_vector = 
		{expressao} colchete_esq exp colchete_dir;
        
    local = 
        {id} id
        |{dec_local} local colchete_esq exp colchete_dir;
        
    local_virgula = //repetições
    	{local_virgula} local virgula;
    	
   	exp_virgula = // repetições
   		{exp_virgula} exp virgula;
    	
	comando = 
		{comando_local} local atribuicao exp ponto
    	|{capture} capture par_esq local_virgula* local par_dir ponto
    	|{show} show par_esq exp_virgula* exp par_dir ponto
    	|{in_case_that} in case that par_esq exp par_dir do [comando1]:comando otherwise? [comando2]:comando
    	|{as_long_as} [as1]:as long [as2]:as par_esq exp par_dir do comando
    	|{considering} considering local from [exp1]:exp to [exp2]:exp by do comando
    	|{comando_bloco} bloco;
    	
    	
	exp =
		{exp1} exp1
		|{exp_ou} exp or exp1
		|{exp_and} exp and exp1;
		
	exp1 = 
		{exp2} exp2
		|{exp_soma} exp1 diferente exp2
		|{exp_sub} exp1 comparacao exp2;
		
	exp2 =
		{exp3} exp3
		|{exp_maior_igual} exp2 maior_igual exp3
		|{exp_menor_igual} exp2 menor_igual exp3
		|{exp_maior} exp2 maior exp3
		|{exp_menor} exp2 menor exp3;
		
	exp3 = 
		{exp4} exp4
		|{exp_sub} exp3 menos exp4
		|{exp_soma} exp3 soma exp4;
	
	exp4 = 
		{exp5} exp5
		|{exp_mod} exp4 mod exp5
		|{exp_div} exp4 div exp5
		|{exp_mult} exp4 mult exp5;
	
	exp5 = //exp terminal 
	    {exp_symbol} symbol
	    |{exp_number} number
	    |{exp_answer} answer
	    |{exp_string} vetor_symbol
	    |{exp_local} local
	    |{exp_not} not exp5
	    |{exp_negativo} menos exp5
	    |{exp_pare} par_esq exp5 par_dir;

    

		
	

 		

 
 
 
