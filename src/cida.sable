Package cida;

Helpers
 digito = ['0' .. '9'];
 minusculo = ['a' .. 'z'];
 maiusculo = ['A' .. 'Z'];
 letra = (maiusculo | minusculo);
 letras = letra*;
 digitos = digito*;
 decimal = digito+;
 numero_real = digitos '.' decimal;
 letras_ou_digitos = letras | digitos;
 underline = '_';
 espaco = ' ';
 tudo_unicode = [0..0xffff];
 string_input = [tudo_unicode - ['''+'"']];
 comentario_blc = [tudo_unicode - '{'];
 boolean = 'yes' | 'no';
 rc = 13;
 nl = 10;
 ht	= 0x0009;
 lf	= 0x000a;
 ff	= 0x000c;
 cr	= 0x000d;
 eol = cr | nl | cr | nl ;
 blank = rc | nl | ht | lf | ff | cr ;
 tipos = 'symbol' | 'number' | 'answer';
 dimensao = '[' digito ']';
 
 
Tokens
 // Delimitadores
 abre_bloco = 'start';
 fecha_bloco = 'finish';
 par_esq = '(';
 par_dir = ')';
 dois_pontos = ':';
 virgula = ',';
 ponto_virgula = ';';
 ponto = '.';
 aspas = '"';
 colchete_esq = '[';
 colchete_dir = ']';
 
 
  // Operacoes Matematicas e Logicas
 numeros = digitos | numero_real;
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 atribuicao = '<<';
 
 // Operacoes Logicas
 menor = '<';
 maior = '>';
 maior_igual = '>=';
 menor_igual = '<=';
 comparacao = '==';
 negacao = '!=';
 
 // Tokens de Controle
  in = 'in';
  case = 'case'; 
  otherwise = 'otherwise';
  that = 'that';
  considering = 'considering';
  from = 'from';
  to = 'to';
  by = 'by';
  as = 'as';
  long = 'long';
  and = 'and';
  or = 'or';
  not = 'not';
  xor = 'xor';
  do = 'do';
 
 code = ('code' [tudo_unicode-[cr+nl]]*);
 show = 'show';
 capture = 'capture';
 
 // Comentarios
 comentario_linha = ('--'[tudo_unicode-[cr+nl]]*);
 comentario_bloco = ('{-'comentario_blc*'-}');
 
 unalterable = 'unalterable';
 alterable = 'alterable';
 
 // Tipos primitivos
 symbol = ''' (string_input) ''';
 number = 'number';
 answer = 'answer';
 booleano = boolean;
 vector = 'vector';

// Vetores
 vetor_symbol = '"' (string_input)* '"';
 vetores = tipos dimensao+ letras;
 
// Identificadores
 id = letras ;

 
// Vazio
 vazio = (espaco | '\t' | '\n' | '\r' | blank )+;
 
Ignored Tokens
 comentario_bloco,
 comentario_linha,
 vazio;
 
Productions
 programa = {programa} code id bloco;
 
 bloco = abre_bloco declaracao+ comando+ fecha_bloco  ;
 
 declaracao = alterable tipo id ponto | unalterable tipo_base id atribuicao* exp* ponto ;
 
 tipo_base = tipos ;
 
 tipo = tipo_base | tipo_base vector colchete_esq exp colchete_dir colchete_esq exp colchete_dir+ ;
 
 local = id | local colchete_esq exp colchete_dir ;
 
 comando = local atribuicao exp ponto 
 	| capture par_esq local+ virgula+ local par_dir ponto 
 	| show par_esq exp+ virgula+ exp par_dir ponto
 	| in case that par_esq exp par_dir do comando otherwise* comando*
 	| as long as par_esq exp par_dir do comando
 	| considering local from exp to exp by exp do comando
 	| bloco ;

 exp = symbol
 	| number
 	| answer
 	| string
 	| local
 	| par_esq exp par_dir
	| menos exp
	| exp soma exp
	| exp menos exp
	| exp mult exp
	| exp div exp
	| exp mod exp
	| exp comparacao exp
	| exp negacao exp
	| exp menor_igual exp
	| exp maior_igual exp
	| exp menor exp
	| exp maior exp
	| not exp
	| exp and exp
	| exp or exp
	| exp xor exp ;